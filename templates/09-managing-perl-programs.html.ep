% layout 'wrapper';
<div class="span8">

<h1 id="d3JpdGluZ19yZWFsX3Byb2dyYW1z"><a name="TWFuYWdpbmdSZWFsUHJvZ3JhbXM"></a>Managing Real Programs</h1>

<p content_id="0" id="d3JpdGluZ19yZWFsX3Byb2dyYW1z">A book can teach you to write small programs to solve example problems. You can learn a lot of syntax that way.</p>

<p content_id="1">To write real programs to solve real problems, you must learn to <em>manage</em> code written in your language. How do you organize code? How do you know that it works? How can you make it robust in the face of errors? What makes code concise, clear, and maintainable? Modern Perl helps you answer all of those questions.</p>

<h2 id="dGVzdGluZw"><a name="VGVzdGluZw"></a>Testing</h2>

<p content_id="2" id="dGVzdGluZw"><a name="dGVzdGluZw1"></a>You&#39;ve already tested your code, if you&#39;ve ever run it, noticed something wasn&#39;t working quite right, made a change, and then ran it again. <em>Testing</em> is the process of verifying that your software behaves as intended. Effective testing automates that process. Rather than relying on humans to perform repeated manual checks perfectly, let the computer do it.</p>

<p content_id="3">Perl provides great tools to help you write the right tests.</p>

<h3 id="VGVzdDo6TW9yZQ"><a name="VGVzdDo6TW9yZQ"></a>Test::More</h3>

<p content_id="4" id="VGVzdDo6TW9yZQ1"> <a name="b2soKQ1"></a> <a name="dGVzdGluZztvaygp1"></a>Perl testing begins with the core module <code>Test::More</code> and its <code>ok()</code> function. <code>ok()</code> takes two parameters, a boolean value and a string which describes the test&#39;s purpose:</p>

<div class="programlisting">

<pre><code>    ok(   1, &#39;the number one should be true&#39;         );
    ok(   0, &#39;... and zero should not&#39;               );
    ok(  &#39;&#39;, &#39;the empty string should be false&#39;      );
    ok( &#39;!&#39;, &#39;... and a non-empty string should not&#39; );

    done_testing();</code></pre>

</div>

<p content_id="5" id="dGVzdGluZzthc3NlcnRpb241">Any condition you can test in your program can eventually become a binary value. Every test <em>assertion</em> is a simple question with a yes or no answer: does this code behave as I intended? A complex program may have thousands of individual conditions. That&#39;s fine. You can test every one of those conditions, if you&#39;re willing to put in the work. Isolating specific behaviors into individual assertions helps you debug errors of coding and errors of understanding, especially as you modify the code in the future.</p>

<p content_id="6">The function <code>done_testing()</code> tells <code>Test::More</code> that the program has executed all of the assertions you expected to run. If the program encountered a runtime exception or otherwise exited unexpectedly before the call to <code>done_testing()</code>, the test framework will notify you that something went wrong. Without a mechanism like <code>done_testing()</code>, how would you <em>know</em>? Admittedly this example code is too simple to fail, but code that&#39;s too simple to fail fails far more often than you want.</p>

<div class="sidebar">

<p content_id="7" id="dGVzdGluZztwbGFu1"> <a name="cGxhbigp1"></a></p>

<p content_id="8"><code>Test::More</code> allows an optional <em>test plan</em> to count the number of individual assertions you plan to run:</p>

<div class="programlisting">

<pre><code>    use Test::More tests =&gt; 4;

    ok(   1, &#39;the number one should be true&#39;         );
    ok(   0, &#39;... and zero should not&#39;               );
    ok(  &#39;&#39;, &#39;the empty string should be false&#39;      );
    ok( &#39;!&#39;, &#39;... and a non-empty string should not&#39; );</code></pre>

</div>

<p content_id="9">The <code>tests</code> argument to <code>Test::More</code> sets the test plan for the program. This is a safety net. If fewer than four tests ran, something went wrong. If more than four tests ran, something went wrong. <code>done_testing()</code> is easier, but sometimes an exact count can be useful.</p>

</div>

<h3 id="cnVubmluZ190ZXN0cw"><a name="UnVubmluZ1Rlc3Rz"></a>Running Tests</h3>

<p content_id="10" id="cnVubmluZ190ZXN0cw">This example test file is a complete Perl program which produces the output:</p>

<div class="screen">
<pre><code>    ok 1 - the number one should be true
    not ok 2 - ... and zero should not
    #   Failed test &#39;... and zero should not&#39;
    #   at truth_values.t line 4.
    not ok 3 - the empty string should be false
    #   Failed test &#39;the empty string should be false&#39;
    #   at truth_values.t line 5.
    ok 4 - ... and a non-empty string should not
    1..4
    # Looks like you failed 2 tests of 4.</code></pre>

</div><p content_id="11" id="VEFQKFRlc3RBbnl0aGluZ1Byb3RvY29sKQ1"> <a name="dGVzdGluZztUQVA1"></a>This output uses a test output format called <em>TAP</em>, the <em>Test Anything Protocol</em> (<a class="url" href="http://testanything.org/">http://testanything.org/</a>). Failed TAP tests produce diagnostic messages as a debugging aid.</p>

<p content_id="12" id="VEFQOjpIYXJuZXNz1"> <a name="cHJvdmU1"></a> <a name="dGVzdGluZztwcm92ZQ1"></a> <a name="dGVzdGluZztydW5uaW5ndGVzdHM1"></a>This output of this small example is easy to understand, but it can get complicated quickly. In most cases, you want to know either that everything passed or the specifics of any failures. The core module <code>TAP::Harness</code> interprets TAP. Its related program <code>prove</code> runs tests and displays only the most pertinent information:</p>

<div class="screen">
<pre><code>    $ <strong>prove truth_values.t</strong>
    truth_values.t .. 1/?
    #   Failed test &#39;... and zero should not&#39;
    #   at truth_values.t line 4.

    #   Failed test &#39;the empty string should be false&#39;
    #   at truth_values.t line 5.
    # Looks like you failed 2 tests of 4.
    truth_values.t .. Dubious, test returned 2
        (wstat 512, 0x200)
    Failed 2/4 subtests

    Test Summary Report
    -------------------
    truth_values.t (Wstat: 512 Tests: 4 Failed: 2)
      Failed tests:  2-3</code></pre>

</div><p content_id="13">That&#39;s a lot of output to display what is already obvious: the second and third tests fail because zero and the empty string evaluate to false. Fortunately, it&#39;s easy to fix those failing tests with boolean coercion (<a href="03-perl-language.html#Ym9vbGVhbl9jb2VyY2lvbg">Boolean Coercion</a>):</p>

<div class="programlisting">

<pre><code>    ok(   <strong>!</strong> 0, &#39;... and zero should not&#39;          );
    ok(  <strong>!</strong> &#39;&#39;, &#39;the empty string should be false&#39; );</code></pre>

</div>

<p content_id="14">With those two changes, <code>prove</code> now displays:</p>

<div class="screen">
<pre><code>    $ <strong>prove truth_values.t</strong>
    truth_values.t .. ok
    All tests successful.</code></pre>

</div><div class="sidebar">

<p content_id="15">See <code>perldoc prove</code> for other test options, such as running tests in parallel (<code>-j</code>), automatically adding <em>lib/</em> to Perl&#39;s include path (<code>-l</code>), recursively running all test files found under <em>t/</em> (<code>-r t</code>), and running slow tests first (<code>--state=slow,save</code>).</p>

<p content_id="16" id="cHJvdmVhbGw1"> <a name="dGVzdGluZztwcm92ZWFsbGFsaWFz1"></a> The bash shell alias <code>proveall</code> may prove useful:</p>

<pre><code>    alias proveall=&#39;prove -j9 --state=slow,save -lr t&#39;</code></pre>

</div>

<h3 id="QmV0dGVyQ29tcGFyaXNvbnM"><a name="QmV0dGVyQ29tcGFyaXNvbnM"></a>Better Comparisons</h3>

<p content_id="17">Even though the heart of all automated testing is the boolean condition &quot;is this true or false?&quot;, reducing everything to that boolean condition is tedious and the diagnostics could be better. <code>Test::More</code> provides several other convenient assertion functions.</p>

<p content_id="18" id="aXMoKQ1"> <a name="dGVzdGluZztpcygp1"></a> <a name="b3BlcmF0b3JzO2Vx2"></a>The <code>is()</code> function compares two values using Perl&#39;s <code>eq</code> operator. If the values are equal, the test passes:</p>

<div class="programlisting">

<pre><code>    is(         4, 2 + 2, &#39;addition should work&#39; );
    is( &#39;pancake&#39;,   100, &#39;pancakes are numeric&#39; );</code></pre>

</div>

<p content_id="19">As you might expect, the first test passes and the second fails with a diagnostic message:</p>

<div class="screen">
<pre><code>    t/is_tests.t .. 1/2
    #   Failed test &#39;pancakes are numeric&#39;
    #   at t/is_tests.t line 8.
    #          got: &#39;pancake&#39;
    #     expected: &#39;100&#39;
    # Looks like you failed 1 test of 2.</code></pre>

</div><p content_id="20">Where <code>ok()</code> only provides the line number of the failing test, <code>is()</code> displays the expected and received values.</p>

<p content_id="21"><code>is()</code> applies implicit scalar context to its values (<a href="11-what-to-avoid-in-perl.html#cHJvdG90eXBlcw">Prototypes</a>). This means, for example, that you can check the number of elements in an array without explicitly evaluating the array in scalar context <span class="footnote">...and you can omit the parenthesis.</span>:</p>

<div class="programlisting">

<pre><code>    my @cousins = qw( Rick Kristen Alex
                      Kaycee Eric Corey );
    is @cousins, 6, &#39;I should have only six cousins&#39;;</code></pre>

</div>

<p content_id="22">... though some people prefer to write <code>scalar @cousins</code> for the sake of clarity.</p>

<p content_id="23" id="aXNudCgp1"> <a name="dGVzdGluZztpc250KCk1"></a> <a name="b3BlcmF0b3JzO25l2"></a><code>Test::More</code>&#39;s corresponding <code>isnt()</code> function compares two values using the <code>ne</code> operator, and passes if they are not equal. It also provides scalar context to its operands.</p>

<p content_id="24" id="Y21wX29rKCk1"> <a name="dGVzdGluZztjbXBfb2soKQ1"></a>Both <code>is()</code> and <code>isnt()</code> apply <em>string comparisons</em> with the <code>eq</code> and <code>ne</code> operators. This almost always does the right thing, but for complex values such as objects with overloading (<a href="09-managing-perl-programs.html#b3ZlcmxvYWRpbmc">Overloading</a>) or dual vars (<a href="03-perl-language.html#ZHVhbHZhcnM">Dualvars</a>), use the <code>cmp_ok()</code> function which requires you to provide a specific comparison operator:</p>

<div class="programlisting">

<pre><code>    cmp_ok( 100, $cur_balance, &#39;&lt;=&#39;,
           &#39;I should have at least $100&#39; );

    cmp_ok( $monkey, $ape, &#39;==&#39;,
           &#39;Simian numifications should agree&#39; );</code></pre>

</div>

<p content_id="25" id="aXNhX29rKCk1"> <a name="dGVzdGluZztpc2Ffb2soKQ1"></a>Classes and objects provide their own interesting ways to interact with tests. Test that a class or object extends another class (<a href="07-object-oriented-perl.html#aW5oZXJpdGFuY2U">Inheritance</a>) with <code>isa_ok()</code>:</p>

<div class="programlisting">

<pre><code>    my $chimpzilla = RobotMonkey-&gt;new;
    isa_ok( $chimpzilla, &#39;Robot&#39; );
    isa_ok( $chimpzilla, &#39;Monkey&#39; );</code></pre>

</div>

<p content_id="26"><code>isa_ok()</code> provides its own diagnostic message on failure.</p>

<p content_id="27"><code>can_ok()</code> verifies that a class or object can perform the requested method (or methods):</p>

<div class="programlisting">

<pre><code>    can_ok( $chimpzilla, &#39;eat_banana&#39; );
    can_ok( $chimpzilla, &#39;transform&#39;, &#39;destroy_tokyo&#39; );</code></pre>

</div>

<p content_id="28">The <code>is_deeply()</code> function compares two references to ensure that their contents are equal:</p>

<div class="programlisting">

<pre><code>    use Clone;

    my $numbers   = [ 4, 8, 15, 16, 23, 42 ];
    my $clonenums = Clone::clone( $numbers );

    is_deeply( $numbers, $clonenums,
         &#39;clone() should produce identical items&#39; );</code></pre>

</div>

<p content_id="29" id="Q1BBTjtUZXN0OjpEaWZmZXJlbmNlcw1"> <a name="Q1BBTjtUZXN0OjpEZWVw1"></a>If the comparison fails, <code>Test::More</code> will do its best to provide a reasonable diagnostic indicating the position of the first inequality between the structures. See the CPAN modules <code>Test::Differences</code> and <code>Test::Deep</code> for more configurable tests.</p>

<p content_id="30"><code>Test::More</code> has several more test functions, but these are the most useful.</p>

<h3 id="T3JnYW5pemluZ1Rlc3Rz"><a name="T3JnYW5pemluZ1Rlc3Rz"></a>Organizing Tests</h3>

<p content_id="31" id="dGVzdGluZzsudGZpbGVz1"> <a name="dGVzdGluZzt0L2RpcmVjdG9yeQ1"></a> <a name="TW9kdWxlOjpCdWlsZA1"></a> <a name="RXh0VXRpbHM6Ok1ha2VNYWtlcg1"></a>CPAN distributions should include a <em>t/</em> directory containing one or more test files named with the <em>.t</em> suffix. When you build a distribution with <code>Module::Build</code> or <code>ExtUtils::MakeMaker</code>, the testing step runs all of the <em>t/*.t</em> files, summarizes their output, and succeeds or fails on the results of the test suite as a whole. There are no concrete guidelines on how to manage the contents of individual <em>.t</em> files, though two strategies are popular:</p>

<ul>

<li>Each <em>.t</em> file should correspond to a <em>.pm</em> file</li>

<li>Each <em>.t</em> file should correspond to a feature</li>

</ul>

<p content_id="32">A hybrid approach is the most flexible; one test can verify that all of your modules compile, while other tests demonstrate that each module behaves as intended. As your project grows, the second approach is easier to manage. Keep your test files small and focused and they&#39;ll be easier to maintain.</p>

<p content_id="33">Separate test files can also speed up development. If you&#39;re adding the ability to breathe fire to your <code>RobotMonkey</code>, you may want only to run the <em>t/breathe_fire.t</em> test file. When you have the feature working to your satisfaction, run the entire test suite to verify that local changes have no unintended global effects.</p>

<h3 id="T3RoZXJUZXN0aW5nTW9kdWxlcw"><a name="T3RoZXJUZXN0aW5nTW9kdWxlcw"></a>Other Testing Modules</h3>

<p content_id="34" id="VGVzdDo6QnVpbGRlcg1"> <a name="dGVzdGluZztUZXN0OjpCdWlsZGVy1"></a><code>Test::More</code> relies on a testing backend known as <code>Test::Builder</code>. The latter module manages the test plan and coordinates the test output into TAP. This design allows multiple test modules to share the same <code>Test::Builder</code> backend. Consequently, the CPAN has hundreds of test modules available—and they can all work together in the same program.</p>

<ul>

<li><code>Test::Fatal</code> helps test that your code throws (and does not throw) exceptions appropriately. You may also encounter <code>Test::Exception</code>.</li>

<li><code>Test::MockObject</code> and <code>Test::MockModule</code> allow you to test difficult interfaces by <em>mocking</em> (emulating but producing different results).</li>

<li><code>Test::WWW::Mechanize</code> helps test web applications, while <code>Plack::Test</code>, <code>Plack::Test::Agent</code>, and the subclass <code>Test::WWW::Mechanize::PSGI</code> can do so without using an external live web server.</li>

<li><code>Test::Database</code> provides functions to test the use and abuse of databases. <code>DBICx::TestDatabase</code> helps test schemas built with <code>DBIx::Class</code>.</li>

<li><code>Test::Class</code> offers an alternate mechanism for organizing test suites. It allows you to create classes in which specific methods group tests. You can inherit from test classes just as your code classes inherit from each other. This is an excellent way to reduce duplication in test suites. See Curtis Poe&#39;s excellent <code>Test::Class</code> series <span class="footnote"><a class="url" href="http://www.modernperlbooks.com/mt/2009/03/organizing-test-suites-with-testclass.html">http://www.modernperlbooks.com/mt/2009/03/organizing-test-suites-with-testclass.html</a></span>. The newer <code>Test::Routine</code> distribution offers similar possibilities through the use of Moose (<a href="07-object-oriented-perl.html#bW9vc2U">Moose</a>).</li>

<li><code>Test::Differences</code> tests strings and data structures for equality and displays any differences in its diagnostics. <code>Test::LongString</code> adds similar assertions.</li>

<li><code>Test::Deep</code> tests the equivalence of nested data structures (<a href="03-perl-language.html#bmVzdGVkX2RhdGFfc3RydWN0dXJlcw">Nested Data Structures</a>).</li>

<li><code>Devel::Cover</code> analyzes the execution of your test suite to report on the amount of your code your tests actually exercises. In general, the more coverage the better—though 100% coverage is not always possible, 95% is far better than 80%.</li>

<li><code>Test::Most</code> gathers several useful test modules into one parent module. It saves time and effort.</li>

</ul>

<p content_id="35" id="Q1BBTjtUZXN0OjpFeGNlcHRpb241"> <a name="Q1BBTjtUZXN0OjpGYXRhbA2"></a> <a name="Q1BBTjtUZXN0OjpNb2NrT2JqZWN02"></a> <a name="Q1BBTjtUZXN0OjpNb2NrTW9kdWxl2"></a> <a name="Q1BBTjtUZXN0OjpXV1c6Ok1lY2hhbml6ZQ1"></a> <a name="Q1BBTjtQbGFjazo6VGVzdA1"></a> <a name="Q1BBTjtUZXN0OjpXV1c6Ok1lY2hhbml6ZTo6UFNHSQ1"></a> <a name="Q1BBTjtUZXN0OjpEYXRhYmFzZQ1"></a> <a name="Q1BBTjtEQklDeDo6VGVzdERhdGFiYXNl1"></a> <a name="Q1BBTjtEQkl4OjpDbGFzcw1"></a> <a name="Q1BBTjtUZXN0OjpDbGFzcw2"></a> <a name="Q1BBTjtUZXN0OjpSb3V0aW5l1"></a> <a name="Q1BBTjtUZXN0OjpEaWZmZXJlbmNlcw2"></a> <a name="Q1BBTjtUZXN0OjpEZWVw2"></a> <a name="Q1BBTjtUZXN0OjpMb25nU3RyaW5n1"></a> <a name="Q1BBTjtEZXZlbDo6Q292ZXI1"></a> <a name="Q1BBTjtUZXN0OjpNb3N01"></a>See the Perl QA project (<a class="url" href="http://qa.perl.org/">http://qa.perl.org/</a>) for more information about testing in Perl.</p>

<h2 id="aGFuZGxpbmdfd2FybmluZ3M"><a name="SGFuZGxpbmdXYXJuaW5ncw"></a>Handling Warnings</h2>

<p content_id="36" id="aGFuZGxpbmdfd2FybmluZ3M">While there&#39;s more than one way to write a working Perl program, some of those ways can be confusing, unclear, and even incorrect. Perl&#39;s optional warnings system can help you avoid these situations.</p>

<h3 id="cHJvZHVjaW5nX3dhcm5pbmdz"><a name="UHJvZHVjaW5nV2FybmluZ3M"></a>Producing Warnings</h3>

<p content_id="37" id="cHJvZHVjaW5nX3dhcm5pbmdz"><a name="YnVpbHRpbnM7d2Fybg1"></a>Use the <code>warn</code> builtin to emit a warning:</p>

<div class="programlisting">

<pre><code>    warn &#39;Something went wrong!&#39;;</code></pre>

</div>

<p content_id="38"><code>warn</code> prints a list of values to the STDERR filehandle (<a href="09-managing-perl-programs.html#ZmlsZWhhbmRsZQ">Input and Output</a>). Perl will append the filename and line number of the <code>warn</code> call unless the last element of the list ends in a newline.</p>

<p content_id="39" id="Q2FycA2"> <a name="Q2FycDtjYXJwKCk2"></a> <a name="Q2FycDtjbHVjaygp1"></a> <a name="Q2FycDtjcm9haygp2"></a> <a name="Q2FycDtjb25mZXNzKCk1"></a>The core <code>Carp</code> module extends Perl&#39;s warning mechanisms. Its <code>carp()</code> function reports a warning from the perspective of the calling code. Given a function like:</p>

<div class="programlisting">

<pre><code>    use Carp &#39;carp&#39;;

    sub only_two_arguments
    {
        my ($lop, $rop) = @_;
        carp( &#39;Too many arguments provided&#39; ) if @_ &gt; 2;
        ...
    }</code></pre>

</div>

<p content_id="40">... the arity (<a href="04-perl-operators.html#YXJpdHk">Arity</a>) warning will include the filename and line number of the <em>calling</em> code, not <code>only_two_arguments()</code>. <code>Carp</code>&#39;s <code>cluck()</code> is similar, but it produces a backtrace of <em>all</em> function calls up to the current function.</p>

<p content_id="41" id="Q2FycDt2ZXJib3Nl1"><code>Carp</code>&#39;s verbose mode adds backtraces to all warnings produced by <code>carp()</code> and <code>croak()</code> (<a href="05-perl-functions.html#cmVwb3J0aW5nX2Vycm9ycw">Reporting Errors</a>) throughout the entire program:</p>

<div class="screen">
<pre><code>    $ perl -MCarp=verbose my_prog.pl</code></pre>

</div><p content_id="42">Use <code>Carp</code> when writing modules (<a href="09-managing-perl-programs.html#bW9kdWxlcw">Modules</a>) instead of <code>warn</code> or <code>die</code>.</p>

<h3 id="RW5hYmxpbmdhbmREaXNhYmxpbmdXYXJuaW5ncw"><a name="RW5hYmxpbmdhbmREaXNhYmxpbmdXYXJuaW5ncw"></a>Enabling and Disabling Warnings</h3>

<p content_id="43" id="LXc7ZW5hYmxld2FybmluZ3Njb21tYW5kLWxpbmVhcmd1bWVudA1"> <a name="Y29tbWFuZC1saW5lYXJndW1lbnRzOy131"></a>Sometimes older code uses the <code>-w</code> command-line argument. <code>-w</code> enables warnings throughout the program, even in external modules written and maintained by other people. It&#39;s all or nothing—though it can help you if you have the time and energy to eliminate warnings and potential warnings throughout the entire codebase.</p>

<p content_id="44" id="d2FybmluZ3M1"> <a name="cHJhZ21hczt3YXJuaW5ncw2"></a>The modern approach is to use the <code>warnings</code> pragma <span class="footnote">...or an equivalent such as <code>use Modern::Perl;</code>.</span>. This enables warnings in <em>lexical</em> scopes. If you&#39;ve used <code>warnings</code> in a scope, you&#39;re indicating that the code should not normally produce warnings.</p>

<div class="tip">
<p content_id="45" class="title">Global Warnings Flags</p>
<p content_id="46" id="LVc7ZW5hYmxld2FybmluZ3Njb21tYW5kLWxpbmVhcmd1bWVudA1"> <a name="Y29tbWFuZC1saW5lYXJndW1lbnRzOy1X1"></a> <a name="LVg7ZGlzYWJsZXdhcm5pbmdzY29tbWFuZC1saW5lYXJndW1lbnQ1"></a> <a name="Y29tbWFuZC1saW5lYXJndW1lbnRzOy1Y1"></a></p>

<p content_id="47">The <code>-W</code> flag enables warnings throughout the program unilaterally, regardless of any use of <code>warnings</code>. The <code>-X</code> flag <em>disables</em> warnings throughout the program unilaterally. Neither is common.</p>

</div><p content_id="48" id="JF5X1"> <a name="Z2xvYmFsdmFyaWFibGVzOyReVw1"></a>All of <code>-w</code>, <code>-W</code>, and <code>-X</code> affect the value of the global variable <code>$^W</code>. Code written before the <code>warnings</code> pragma <span class="footnote">Perl 5.6.0, spring 2000, so you know it&#39;s old.</span> may <code>local</code>ize <code>$^W</code> to suppress certain warnings within a given scope.</p>

<h3 id="RGlzYWJsaW5nV2FybmluZ0NhdGVnb3JpZXM"><a name="RGlzYWJsaW5nV2FybmluZ0NhdGVnb3JpZXM"></a>Disabling Warning Categories</h3>

<p content_id="49">To disable selective warnings within a scope, use <code>no warnings;</code> with an argument list. Omitting the argument list disables all warnings within that scope.</p>

<p content_id="50"><code>perldoc perllexwarn</code> lists all of the warnings categories your version of Perl understands. Most of them represent truly interesting conditions, but some may be actively unhelpful in your specific circumstances. For example, the <code>recursion</code> warning will occur if Perl detects that a function has called itself more than a hundred times. If you are confident in your ability to write recursion-ending conditions, you may disable this warning within the scope of the recursion (though tail calls may be better; <a href="05-perl-functions.html#dGFpbF9jYWxscw">Tail Calls</a>).</p>

<p content_id="51">If you&#39;re generating code (<a href="09-managing-perl-programs.html#Y29kZV9nZW5lcmF0aW9u">Code Generation</a>) or locally redefining symbols, you may wish to disable the <code>redefine</code> warnings.</p>

<p content_id="52">Some experienced Perl hackers disable the <code>uninitialized</code> value warnings in string-processing code which concatenates values from many sources. If you&#39;re careful about initializing your variables, you may never need to disable this warning, but sometimes the warning gets in the way of writing concise code in your local style.</p>

<h3 id="ZmF0YWxfd2FybmluZ3M"><a name="TWFraW5nV2FybmluZ3NGYXRhbA"></a>Making Warnings Fatal</h3>

<p content_id="53" id="ZmF0YWxfd2FybmluZ3M"> <a name="d2FybmluZ3M7ZmF0YWw1"></a>If your project considers warnings as onerous as errors, you can make them fatal. To promote <em>all</em> warnings into exceptions within a lexical scope:</p>

<div class="programlisting">

<pre><code>    use warnings FATAL =&gt; &#39;all&#39;;</code></pre>

</div>

<p content_id="54">You may also make specific categories of warnings fatal, such as the use of deprecated constructs:</p>

<div class="programlisting">

<pre><code>    use warnings FATAL =&gt; &#39;deprecated&#39;;</code></pre>

</div>

<p content_id="55">With proper discipline, this can produce very robust code—but be cautious. Many warnings come from runtime conditions. If your test suite fails to identify all of the warnings you might encounter, your program may exit from uncaught runtime exceptions. Keep in mind that newer versions of Perl may add new warnings and that custom warnings will also be fatal (<a href="09-managing-perl-programs.html#cmVnaXN0ZXJpbmdfd2FybmluZ3M">Registering Your Own Warnings</a>). If you enable fatal warnings, do so only in code that you control and never in library code you expect other people to use.</p>

<h3 id="Q2F0Y2hpbmdXYXJuaW5ncw"><a name="Q2F0Y2hpbmdXYXJuaW5ncw"></a>Catching Warnings</h3>

<p content_id="56" id="JFNJR3tfX1dBUk5fX301"> <a name="d2FybmluZ3M7Y2F0Y2hpbmc1"></a>If you&#39;re willing to work for it, you can catch warnings as you would exceptions. The <code>%SIG</code> variable <span class="footnote">See <code>perldoc perlvar</code>.</span> contains handlers for out-of-band signals raised by Perl or your operating system. Assign a function reference to <code>$SIG{__WARN__}</code> to catch a warning:</p>

<div class="programlisting">

<pre><code>    {
        my $warning;
        local $SIG{__WARN__} = sub { $warning .= shift };

        # do something risky
        ...

        say &quot;Caught warning:\n$warning&quot; if $warning;
    }</code></pre>

</div>

<p content_id="57">Within the warning handler, the first argument is the warning&#39;s message. Admittedly, this technique is less useful than disabling warnings lexically—but it can come to good use in test modules such as <code>Test::Warnings</code> from the CPAN, where the actual text of the warning is important.</p>

<p content_id="58">Beware that <code>%SIG</code> is global. <code>local</code>ize it in the smallest possible scope, but understand that it&#39;s still a global variable.</p>

<h3 id="cmVnaXN0ZXJpbmdfd2FybmluZ3M"><a name="UmVnaXN0ZXJpbmdZb3VyT3duV2FybmluZ3M"></a>Registering Your Own Warnings</h3>

<p content_id="59" id="cmVnaXN0ZXJpbmdfd2FybmluZ3M"><a name="d2FybmluZ3M7cmVnaXN0ZXJpbmc1"></a> <a name="bGV4aWNhbHdhcm5pbmdz1"></a>The <code>warnings::register</code> pragma allows you to create your own warnings so that users of your code can enable and disable them in lexical scopes. From a module, <code>use</code> the <code>warnings::register</code> pragma:</p>

<div class="programlisting">

<pre><code>    package Scary::Monkey;

    <strong>use warnings::register;</strong></code></pre>

</div>

<p content_id="60">This will create a new warnings category named after the package <code>Scary::Monkey</code>. Enable these warnings with <code>use warnings &#39;Scary::Monkey&#39;</code> and disable them with <code>no warnings &#39;Scary::Monkey&#39;</code>.</p>

<p content_id="61">Use <code>warnings::enabled()</code> to test if the caller&#39;s lexical scope has enabled a warning category. Use <code>warnings::warnif()</code> to produce a warning only if warnings are in effect. For example, to produce a warning in the <code>deprecated</code> category:</p>

<div class="programlisting">

<pre><code>    package Scary::Monkey;

    use warnings::register;

    <strong>sub import</strong>
    <strong>{</strong>
        <strong>warnings::warnif( &#39;deprecated&#39;,</strong>
            <strong>&#39;empty imports from &#39; . __PACKAGE__ .</strong>
            <strong>&#39; are now deprecated&#39; )</strong>
        <strong>unless @_;</strong>
    <strong>}</strong></code></pre>

</div>

<p content_id="62">See <code>perldoc perllexwarn</code> for more details.</p>

<h2 id="ZmlsZXM"><a name="RmlsZXM"></a>Files</h2>

<p content_id="63" id="ZmlsZXM">Most programs must interact with the real world somehow, mostly by reading, writing, and otherwise manipulating files. Perl&#39;s origin as a tool for system administrators has produced a language well suited for text processing.</p>

<h3 id="ZmlsZV9tb2Rlc190YWJsZQ"><a name="SW5wdXRhbmRPdXRwdXQ"></a>Input and Output</h3>

<p content_id="64" id="ZmlsZWhhbmRsZQ"> <a name="ZmlsZWhhbmRsZXM1"></a> <a name="ZmlsZWhhbmRsZXM7U1RESU41"></a> <a name="ZmlsZWhhbmRsZXM7U1RERVJS1"></a> <a name="ZmlsZWhhbmRsZXM7U1RET1VU1"></a> <a name="U1RESU41"></a> <a name="U1RERVJS1"></a> <a name="U1RET1VU1"></a>A <em>filehandle</em> represents the current state of one specific channel of input or output. Every Perl program has three standard filehandles available, <code>STDIN</code> (the input to the program), <code>STDOUT</code> (the output from the program), and <code>STDERR</code> (the error output from the program). By default, everything you <code>print</code> or <code>say</code> goes to <code>STDOUT</code>, while errors and warnings goes to <code>STDERR</code>. This separation of output allows you to redirect useful output and errors to two different places—an output file and error logs, for example.</p>

<p content_id="65" id="YnVpbHRpbnM7b3Blbg2">Use the <code>open</code> builtin to get a filehandle. To open a file for reading:</p>

<div class="programlisting">

<pre><code>    open my $fh, &#39;&lt;&#39;, &#39;filename&#39;
        or die &quot;Cannot read &#39;$filename&#39;: $!\n&quot;;</code></pre>

</div>

<p content_id="66">The first operand is a lexical which will contain the resulting filehandle. The second operand is the <em>file mode</em>, which determines the type of the filehandle operation (reading, writing, or appending, for example). The final operand is the name of the file. If the <code>open</code> fails, the <code>die</code> clause will throw an exception, with the reason for failure in the <code>$!</code> magic variable.</p>

<p content_id="67">You may open files for writing, appending, reading and writing, and more. Some of the most important file modes are:</p>

<table>
<caption>File Modes</caption>
<tr><th><strong>Symbols</strong><a name="ZmlsZV9tb2Rlc190YWJsZQ"></a></th><th><strong>Explanation</strong></th></tr>
<tr><td><code>&lt;</code></td>
<td>Open for reading</td>
</tr>
<tr><td><code>&gt;</code></td>
<td>Open for writing, clobbering existing contents if the file exists and creating a new file otherwise.</td>
</tr>
<tr><td><code>&gt;&gt;</code></td>
<td>Open for writing, appending to any existing contents and creating a new file otherwise.</td>
</tr>
<tr><td><code>+&lt;</code></td>
<td>Open for both reading and writing.</td>
</tr>
<tr><td><code>-|</code></td>
<td>Open a pipe to an external process for reading.</td>
</tr>
<tr><td><code>|-</code></td>
<td>Open a pipe to an external process for writing.</td>
</tr>
</table>

<p content_id="68">You can even create filehandles which read from or write to plain Perl scalars, using any existing file mode:</p>

<div class="programlisting">

<pre><code>    open my $read_fh,  &#39;&lt;&#39;, \$fake_input;
    open my $write_fh, &#39;&gt;&#39;, \$captured_output;

    do_something_awesome( $read_fh, $write_fh );</code></pre>

</div>

<p content_id="69" id="YnVpbHRpbnM7c3lzb3Blbg1"><code>perldoc perlopentut</code> explains in detail more exotic uses of <code>open</code>, including its ability to launch and control other processes, as well as the use of <code>sysopen</code> for finer-grained control over input and output. <code>perldoc perlfaq5</code> includes working code for many common IO tasks.</p>

<div class="tip">
<p content_id="70" class="title">Remember <code>autodie</code>?</p>
<p content_id="71">Assume all of the examples in this section have <code>use autodie;</code> enabled, and so can safely elide error handling. If you choose not to use <code>autodie</code>, remember to check the return values of all system calls to handle errors appropriately.</p>

</div><h4 id="VW5pY29kZSxJT0xheWVycyxhbmRGaWxlTW9kZXM"><a name="VW5pY29kZSxJT0xheWVycyxhbmRGaWxlTW9kZXM"></a>Unicode, IO Layers, and File Modes</h4>

<p content_id="72" id="SU9sYXllcnM2">In addition to the file mode, you may add an <em>IO encoding layer</em> which allows Perl to encode to or decode from a Unicode encoding. For example, if you know you&#39;re going to read a file written in the UTF-8 encoding:</p>

<div class="programlisting">

<pre><code>    open my $in_fh,  &#39;&gt;:encoding(UTF-8)&#39;, $infile;</code></pre>

</div>

<p content_id="73">... or to write to a file using the UTF-8 encoding:</p>

<div class="programlisting">

<pre><code>    open my $out_fh, &#39;&lt;:encoding(UTF-8)&#39;, $outfile;</code></pre>

</div>

<h4 id="VHdvLWFyZ3VtZW50b3Blbg"><a name="VHdvLWFyZ3VtZW50b3Blbg"></a>Two-argument <code>open</code></h4>

<p content_id="74">Older code often uses the two-argument form of <code>open()</code>, which jams the file mode with the name of the file to open:</p>

<div class="programlisting">

<pre><code>    open my $fh, <strong>&quot;&gt; $some_file&quot;</strong>
        or die &quot;Cannot write to &#39;$some_file&#39;: $!\n&quot;;</code></pre>

</div>

<p content_id="75">Perl must extract the file mode from the filename. That&#39;s a risk; anytime Perl has to guess at what you mean, it may guess incorrectly. Worse, if <code>$some_file</code> came from untrusted user input, you have a potential security problem, as any unexpected characters could change how your program behaves.</p>

<p content_id="76">The three-argument <code>open()</code> is a safer replacement for this code.</p>

<div class="tip">
<p content_id="77" class="title">The Many Names of <code>DATA</code></p>
<p content_id="78" id="REFUQQ1"> <a name="X19EQVRBX181"></a> <a name="X19FTkRfXw1"></a></p>

<p content_id="79">The special package global <code>DATA</code> filehandle represents the current file. When Perl finishes compiling the file, it leaves <code>DATA</code> open and pointing to the end of the compilation unit <em>if</em> the file has a <code>__DATA__</code> or <code>__END__</code> section. Any text which occurs after that token is available for reading from <code>DATA</code>. The entire file is available if you use <code>seek</code> to rewind the filehandle. This is useful for short, self-contained programs. See <code>perldoc perldata</code> for more details.</p>

</div><h4 id="UmVhZGluZ2Zyb21GaWxlcw"><a name="UmVhZGluZ2Zyb21GaWxlcw"></a>Reading from Files</h4>

<p content_id="80" id="YnVpbHRpbnM7cmVhZGxpbmU2"> <a name="PD47Y2lyY3VtZml4cmVhZGxpbmVvcGVyYXRvcg1"></a> <a name="b3BlcmF0b3JzOzw-1"></a>Given a filehandle opened for input, read from it with the <code>readline</code> builtin, also written as <code>&lt;&gt;</code>. A common idiom reads a line at a time in a <code>while()</code> loop:</p>

<div class="programlisting">

<pre><code>    open my $fh, &#39;&lt;&#39;, &#39;some_file&#39;;

    while (&lt;$fh&gt;)
    {
        chomp;
        say &quot;Read a line &#39;$_&#39;&quot;;
    }</code></pre>

</div>

<p content_id="81" id="YnVpbHRpbnM7ZW9m1">In scalar context, <code>readline</code> reads a single line of the file and returns it, or <code>undef</code>&lt; if it&#39;s reached the end of file (<code>eof()</code>). Each iteration in this example returns the next line or <code>undef</code>. This <code>while</code> idiom explicitly checks the definedness of the variable used for iteration, such that only the end of file condition ends the loop. In other words, this is shorthand for:</p>

<div class="programlisting">

<pre><code>    open my $fh, &#39;&lt;&#39;, &#39;some_file&#39;;

    while (defined($_ = &lt;$fh&gt;))
    {
        chomp;
        say &quot;Read a line &#39;$_&#39;&quot;;
        last if eof $fh;
    }</code></pre>

</div>

<div class="tip">
<p content_id="82" class="title">Why use <code>while</code> and not <code>for</code>?</p>
<p content_id="83"><code>for</code> imposes list context on its operand. In the case of <code>readline</code>, Perl will read the <em>entire</em> file before processing <em>any</em> of it. <code>while</code> performs iteration and reads a line at a time. When memory use is a concern, use <code>while</code>.</p>

</div><p content_id="84" id="YnVpbHRpbnM7Y2hvbXA2">Every line read from <code>readline</code> includes the character or characters which mark the end of a line. In most cases, this is a platform-specific sequence consisting of a newline (<code>\n</code>), a carriage return (<code>\r</code>), or a combination of the two (<code>\r\n</code>). Use <code>chomp</code> to remove it.</p>

<p content_id="85">The cleanest way to read a file line-by-line in Perl is:</p>

<div class="programlisting">

<pre><code>    open my $fh, &#39;&lt;&#39;, $filename;

    while (my $line = &lt;$fh&gt;)
    {
        chomp $line;
        ...
    }</code></pre>

</div>

<p content_id="86" id="YnVpbHRpbnM7YmlubW9kZQ2">Perl accesses files in text mode by default. If you&#39;re reading <em>binary</em> data, such as a media file or a compressed file—use <code>binmode</code> before performing any IO. This will force Perl to treat the file data as pure data, without modifying it in any way <span class="footnote">Modifications include translating <code>\n</code> into the platform-specific newline sequence.</span>. While Unix-like platforms may not always <em>need</em> <code>binmode</code>, portable programs play it safe (<a href="03-perl-language.html#dW5pY29kZQ">Unicode and Strings</a>).</p>

<h4 id="V3JpdGluZ3RvRmlsZXM"><a name="V3JpdGluZ3RvRmlsZXM"></a>Writing to Files</h4>

<p content_id="87" id="YnVpbHRpbnM7cHJpbnQ2"> <a name="YnVpbHRpbnM7c2F52"></a>Given a filehandle open for output, <code>print</code> or <code>say</code> to it:</p>

<div class="programlisting">

<pre><code>    open my $out_fh, &#39;&gt;&#39;, &#39;output_file.txt&#39;;

    print $out_fh &quot;Here&#39;s a line of text\n&quot;;
    say   $out_fh &quot;... and here&#39;s another&quot;;</code></pre>

</div>

<p content_id="88">Note the lack of comma between the filehandle and the subsequent operand.</p>

<div class="tip">
<p content_id="89" class="title">Filehandle Disambiguation</p>
<a name="Q29ud2F5LERhbWlhbg1"></a><p content_id="90">Damian Conway&#39;s <em>Perl Best Practices</em> recommends enclosing the filehandle in curly braces as a habit. This is necessary to disambiguate parsing of a filehandle contained in an aggregate variable, and it won&#39;t hurt anything in the simpler cases.</p>

</div><p content_id="91" id="JCw1"> <a name="Z2xvYmFsdmFyaWFibGVzOyQs1"></a> <a name="JFw1"></a> <a name="Z2xvYmFsdmFyaWFibGVzOyRc1"></a>Both <code>print</code> and <code>say</code> take a list of operands. Perl uses the magic global <code>$,</code> as the separator between list values. Perl also uses any value of <code>$\</code> as the final argument to <code>print</code> or <code>say</code>. Thus these two lines of code produce the same result:</p>

<div class="programlisting">

<pre><code>    my @princes = qw( Corwin Eric Random ... );

    print @princes;
    print join( $,, @princes ) . $\;</code></pre>

</div>

<h4 id="Q2xvc2luZ0ZpbGVz"><a name="Q2xvc2luZ0ZpbGVz"></a>Closing Files</h4>

<p content_id="92" id="YnVpbHRpbnM7Y2xvc2U1">When you&#39;ve finished working with a file, <code>close</code> its filehandle explicitly or allow it to go out of scope. Perl will close it for you. The benefit of calling <code>close</code> explicitly is that you can check for—and recover from—specific errors, such as running out of space on a storage device or a broken network connection.</p>

<p content_id="93">As usual, <code>autodie</code> handles these checks for you:</p>

<div class="programlisting">

<pre><code>    use autodie qw( open close );

    open my $fh, &#39;&gt;&#39;, $file;

    ...

    close $fh;</code></pre>

</div>

<h4 id="ZmlsZV9oYW5kbGluZ192YXJpYWJsZXM"><a name="U3BlY2lhbEZpbGVIYW5kbGluZ1ZhcmlhYmxlcw"></a>Special File Handling Variables</h4>

<p content_id="94" id="ZmlsZV9oYW5kbGluZ192YXJpYWJsZXM"> <a name="JC41"></a> <a name="Z2xvYmFsdmFyaWFibGVzOyQu1"></a>For every line read, Perl increments the value of the variable <code>$.</code>, which serves as a line counter.</p>

<p content_id="95" id="JC82"> <a name="Z2xvYmFsdmFyaWFibGVzOyQv1"></a><code>readline</code> uses the current contents of <code>$/</code> as the line-ending sequence. The value of this variable defaults to the most appropriate line-ending character sequence for text files on your current platform. The word <em>line</em> is a misnomer, however. You can set <code>$/</code> to contain any sequence of characters <span class="footnote">... but, sadly, not a regular expression. Maybe by 5.22.</span> This is useful for highly-structured data in which you want to read a <em>record</em> at a time.</p>

<p content_id="96">Given a file with records separated by two blank lines, set <code>$/</code> to <code>\n\n</code> to read a record at a time. <code>chomp</code> on a record read from the file will remove the double-newline sequence.</p>

<p content_id="97" id="JHw2"> <a name="Z2xvYmFsdmFyaWFibGVzOyR81"></a> <a name="YnVmZmVyaW5n1"></a>Perl <em>buffers</em> its output by default, performing IO only when the amount of pending output exceeds a threshold. This allows Perl to batch up expensive IO operations instead of always writing very small amounts of data. Yet sometimes you want to send data as soon as you have it without waiting for that buffering—especially if you&#39;re writing a command-line filter connected to other programs or a line-oriented network service.</p>

<p content_id="98">The <code>$|</code> variable controls buffering on the currently active output filehandle. When set to a non-zero value, Perl will flush the output after each write to the filehandle. When set to a zero value, Perl will use its default buffering strategy.</p>

<div class="tip">
<p content_id="99" class="title">Automatic Flushing</p>
<p content_id="100">Files default to a fully-buffered strategy. <code>STDOUT</code> when connected to an active terminal—but <em>not</em> another program—uses a line-buffered strategy, where Perl will flush <code>STDOUT</code> every time it encounters a newline in the output.</p>

</div><p content_id="101" id="YXV0b2ZsdXNoKCk1"> <a name="SU86OkZpbGU7YXV0b2ZsdXNoKCk1"></a>Instead of cluttering your code with a global variable, use the <code>autoflush()</code> method on a lexical filehandle:</p>

<div class="programlisting">

<pre><code>    open my $fh, &#39;&gt;&#39;, &#39;pecan.log&#39;;
    $fh-&gt;autoflush( 1 );

    ...</code></pre>

</div>

<p content_id="102" id="SU86OkZpbGU2"> <a name="RmlsZUhhbmRsZQ1"></a>As of Perl 5.14, you can use any method provided by <code>IO::File</code> on a filehandle. You do not need to load <code>IO::File</code> explicitly. In Perl 5.12, you must load <code>IO::File</code> yourself.</p>

<p content_id="103" id="SU86OkZpbGU7aW5wdXRfbGluZV9udW1iZXIoKQ1"> <a name="SU86OkZpbGU7aW5wdXRfcmVjb3JkX3NlcGFyYXRvcigp1"></a> <a name="SU86OkhhbmRsZQ2"></a> <a name="SU86OlNlZWthYmxlO3NlZWsoKQ1"></a><code>IO::File</code>&#39;s <code>input_line_number()</code> and <code>input_record_separator()</code> methods do the job of <code>$.</code> and <code>$/</code> on individual filehandles. See the documentation for <code>IO::File</code>, <code>IO::Handle</code>, and <code>IO::Seekable</code>.</p>

<h3 id="RGlyZWN0b3JpZXNhbmRQYXRocw"><a name="RGlyZWN0b3JpZXNhbmRQYXRocw"></a>Directories and Paths</h3>

<p content_id="104" id="YnVpbHRpbnM7b3BlbmRpcg1">Working with directories is similar to working with files, except that you cannot <em>write</em> to directories <span class="footnote">Instead, you save and move and rename and remove files.</span>. Open a directory handle with the <code>opendir</code> builtin:</p>

<div class="programlisting">

<pre><code>    opendir my $dirh, &#39;/home/monkeytamer/tasks/&#39;;</code></pre>

</div>

<p content_id="105" id="YnVpbHRpbnM7cmVhZGRpcg1">The <code>readdir</code> builtin reads from a directory. As with <code>readline</code>, you may iterate over the contents of directories one at a time or you may assign them to an array in one swoop:</p>

<div class="programlisting">

<pre><code>    # iteration
    while (my $file = readdir $dirh)
    {
        ...
    }

    # flatten into a list, assign to array
    my @files = readdir $otherdirh;</code></pre>

</div>

<p content_id="106">Perl 5.12 added a feature where <code>readdir</code> in a <code>while</code> sets <code>$_</code>:</p>

<div class="programlisting">

<pre><code>    use 5.012;

    opendir my $dirh, &#39;tasks/circus/&#39;;

    while (readdir $dirh)
    {
        next if /^\./;
        say &quot;Found a task $_!&quot;;
    }</code></pre>

</div>

<p content_id="107" id="VW5peA1"> <a name="ZmlsZXM7aGlkZGVu1"></a>The curious regular expression in this example skips so-called <em>hidden files</em> on Unix and Unix-like systems, where a leading dot prevents them from appearing in directory listings by default. It also skips the two special files <code>.</code> and <code>..</code>, which represent the current directory and the parent directory respectively.</p>

<p content_id="108" id="ZmlsZXM7cmVsYXRpdmVwYXRocw1"> <a name="ZmlsZXM7YWJzb2x1dGVwYXRocw1"></a>The names returned from <code>readdir</code> are <em>relative</em> to the directory itself. In other words, if the <em>tasks/</em> directory contains three files named <em>eat</em>, <em>drink</em>, and <em>be_monkey</em>, <code>readdir</code> will return <code>eat</code>, <code>drink</code>, and <code>be_monkey</code> and <em>not</em> <em>tasks/eat</em>, <em>tasks/drink</em>, and <em>task/be_monkey</em>. In contrast, an <em>absolute</em> path is a path fully qualified to its filesystem.</p>

<p content_id="109" id="YnVpbHRpbnM7Y2xvc2VkaXI1">Close a directory handle by letting it go out of scope or with the <code>closedir</code> builtin.</p>

<h4 id="TWFuaXB1bGF0aW5nUGF0aHM"><a name="TWFuaXB1bGF0aW5nUGF0aHM"></a>Manipulating Paths</h4>

<p content_id="110">Perl offers a Unixy view of your filesystem and will interpret Unix-style paths appropriately for your operating system and filesystem. If you&#39;re using Microsoft Windows, you can use the path <em>C:/My Documents/Robots/Bender/</em> just as easily as you can use the path <em>C:\My Documents\Robots\Caprica Six\</em>.</p>

<p content_id="111" id="RmlsZTo6U3BlYw1">Even though Perl uses Unix file semantics consistently, cross-platform file manipulation is much easier with a module. The core <code>File::Spec</code> module family lets you manipulate file paths safely and portably. It&#39;s a little clunky, but it&#39;s well documented.</p>

<p content_id="112" id="Q1BBTjtQYXRoOjpDbGFzcw1"> <a name="Q1BBTjtQYXRoOjpDbGFzczo6RGly1"></a> <a name="Q1BBTjtQYXRoOjpDbGFzczo6RmlsZQ1"></a>The <code>Path::Class</code> distribution on the CPAN has a nicer interface. Use the <code>dir()</code> function to create an object representing a directory and the <code>file()</code> function to create an object representing a file:</p>

<div class="programlisting">

<pre><code>    use Path::Class;

    my $meals = dir( &#39;tasks&#39;, &#39;cooking&#39; );
    my $file  = file( &#39;tasks&#39;, &#39;health&#39;, &#39;robots.txt&#39; );</code></pre>

</div>

<p content_id="113">You can get File objects from directories and vice versa:</p>

<div class="programlisting">

<pre><code>    my $lunch      = $meals-&gt;file( &#39;veggie_calzone&#39; );
    my $robots_dir = $robot_list-&gt;dir;</code></pre>

</div>

<p content_id="114">You can even open filehandles to directories and files:</p>

<div class="programlisting">

<pre><code>    my $dir_fh    = $dir-&gt;open;
    my $robots_fh = $robot_list-&gt;open( &#39;r&#39; )
                        or die &quot;Open failed: $!&quot;;</code></pre>

</div>

<p content_id="115" id="Q1BBTjtQYXRoOjpUaW551">Both <code>Path::Class::Dir</code> and <code>Path::Class::File</code> offer further useful behaviors—though beware that if you use a <code>Path::Class</code> object of some kind with an operator or function which expects a string containing a file path, you need to stringify the object yourself. This is a persistent but minor annoyance. (If you find it burdensome, try <code>Path::Tiny</code> as an alternative.)</p>

<div class="programlisting">

<pre><code>    my $contents = read_from_filename( <strong>&quot;</strong>$lunch<strong>&quot;</strong> );</code></pre>

</div>

<h3 id="RmlsZU1hbmlwdWxhdGlvbg"><a name="RmlsZU1hbmlwdWxhdGlvbg"></a>File Manipulation</h3>

<p content_id="116" id="LVg7ZmlsZXRlc3RvcGVyYXRvcnM1"> <a name="b3BlcmF0b3JzOy1Y1"></a>Besides reading and writing files, you can also manipulate them as you would directly from a command line or a file manager. The file test operators, collectively called the <code>-X</code> operators, examine file and directory attributes. To test that a file exists:</p>

<div class="programlisting">

<pre><code>    say &#39;Present!&#39; if -e $filename;</code></pre>

</div>

<p content_id="117" id="LWU7ZmlsZWV4aXN0c29wZXJhdG9y1"> <a name="b3BlcmF0b3JzOy1l1"></a>The <code>-e</code> operator has a single operand, the name of a file or a file or directory handle. If the file exists, the expression will evaluate to a true value. <code>perldoc -f -X</code> lists all other file tests; the most popular are:</p>

<ul>

<li><p content_id="118"><code>-f</code></p>

, which returns a true value if its operand is a plain file</li>

<li><p content_id="119"><code>-d</code></p>

, which returns a true value if its operand is a directory</li>

<li><p content_id="120"><code>-r</code></p>

, which returns a true value if the file permissions of its operand permit reading by the current user</li>

<li><p content_id="121"><code>-s</code></p>

, which returns a true value if its operand is a non-empty file</li>

</ul>

<p content_id="122" id="LWQ7ZGlyZWN0b3J5dGVzdG9wZXJhdG9y1"> <a name="LWY7ZmlsZXRlc3RvcGVyYXRvcg1"></a> <a name="LXI7cmVhZGFibGVmaWxldGVzdG9wZXJhdG9y1"></a> <a name="LXM7bm9uLWVtcHR5ZmlsZXRlc3RvcGVyYXRvcg1"></a> <a name="b3BlcmF0b3JzOy1k1"></a> <a name="b3BlcmF0b3JzOy1m1"></a> <a name="b3BlcmF0b3JzOy1y1"></a> <a name="b3BlcmF0b3JzOy1z1"></a>Look up the documentation for any of these operators with <code>perldoc -f -r</code>, for example.</p>

<p content_id="123" id="YnVpbHRpbnM7cmVuYW1l1">The <code>rename</code> builtin can rename a file or move it between directories. It takes two operands, the old path of the file and the new path:</p>

<div class="programlisting">

<pre><code>    rename &#39;death_star.txt&#39;, &#39;carbon_sink.txt&#39;;

    # or if you&#39;re stylish:
    rename &#39;death_star.txt&#39; =&gt; &#39;carbon_sink.txt&#39;;</code></pre>

</div>

<p content_id="124" id="RmlsZTo6Q29weQ1"> <a name="YnVpbHRpbnM7dW5saW5r1"></a> <a name="YnVpbHRpbnM7ZGVsZXRl1"></a> <a name="ZmlsZXM7Y29weWluZw1"></a> <a name="ZmlsZXM7bW92aW5n1"></a> <a name="ZmlsZXM7cmVtb3Zpbmc1"></a> <a name="ZmlsZXM7ZGVsZXRpbmc1"></a>There&#39;s no core builtin to copy a file, but the core <code>File::Copy</code> module provides both <code>copy()</code> and <code>move()</code> functions. Use the <code>unlink</code> builtin to remove one or more files. (The <code>delete</code> builtin deletes an element from a hash, not a file from the filesystem.) These functions and builtins all return true values on success and set <code>$!</code> on error.</p>

<div class="tip">
<p content_id="125" class="title">Better than <code>File::Spec</code></p>
<p content_id="126"><code>Path::Class</code> provides convenience methods to check certain file attributes as well as to remove files completely and portably.</p>

</div><p content_id="127" id="YnVpbHRpbnM7Y2hkaXI1"> <a name="Q3dk1"></a> <a name="Q3dkO2N3ZCgp1"></a>Perl tracks its current working directory. By default, this is the active directory from where you launched the program. The core <code>Cwd</code> module&#39;s <code>cwd()</code> function returns the name of the current working directory. The builtin <code>chdir</code> attempts to change the current working directory. Working from the correct directory is essential to working with files with relative paths.</p>

<div class="tip">
<p content_id="128" class="title">Switching Directories</p>
<p content_id="129">If you love the command-line tools <code>pushd</code> and <code>popd</code>, try <code>File::pushd</code>.</p>

</div><h2 id="bW9kdWxlcw"><a name="TW9kdWxlcw"></a>Modules</h2>

<p content_id="130" id="Q1BBTjtGaWxlOjpwdXNoZA1"><a name="bW9kdWxlcw"></a><a name="bW9kdWxlcw2"></a>Many people consider the CPAN (<a href="02-perl-community.html#Y3Bhbg">The CPAN</a>) to be Perl&#39;s best advantage. The CPAN is a system for finding and installing modules. A <em>module</em> is a package contained in its own file and loadable with <code>use</code> or <code>require</code>. A module must be valid Perl code. It must end with an expression which evaluates to a true value so that the Perl parser knows it has loaded and compiled the module successfully. There are no other requirements, only strong conventions.</p>

<p content_id="131" id="Ojo7cGFja2FnZW5hbWVzZXBhcmF0b3I1">When you load a module, Perl splits the package name on double-colons (<code>::</code>) and turns the components of the package name into a file path. This means that <code>use StrangeMonkey;</code> causes Perl to search for a file named <em>StrangeMonkey.pm</em> in every directory in <code>@INC</code>, in order, until it finds one or exhausts the list.</p>

<p content_id="132">Similarly, <code>use StrangeMonkey::Persistence;</code> causes Perl to search for a file named <code>Persistence.pm</code> in every directory named <em>StrangeMonkey/</em> present in every directory in <code>@INC</code>, and so on. <code>use StrangeMonkey::UI::Mobile;</code> causes Perl to search for a relative file path of <em>StrangeMonkey/UI/Mobile.pm</em> in every directory in <code>@INC</code>.</p>

<p content_id="133">The resulting file may or may not contain a package declaration matching its filename—there is no such technical <em>requirement</em>—but it&#39;s easier to understand that way.</p>

<div class="tip">
<p content_id="134" class="title"><code>perldoc</code> Tricks</p>
<p content_id="135" id="cGVybGRvYzstbA1"> <a name="cGVybGRvYzstbQ1"></a> <a name="cGVybGRvYzstbG01"></a></p>

<p content_id="136"><code>perldoc -l Module::Name</code> will print the full path to the relevant <em>.pm</em> file, if that file contains <em>documentation</em> in POD form. <code>perldoc -lm Module::Name</code> will print the full path to the <em>.pm</em> file. <code>perldoc -m Module::Name</code> will display the contents of the <em>.pm</em> file.</p>

</div><h3 id="aW1wb3J0"><a name="VXNpbmdhbmRJbXBvcnRpbmc"></a>Using and Importing</h3>

<p content_id="137" id="aW1wb3J0"><a name="YnVpbHRpbnM7dXNl2"></a> <a name="aW1wb3J0KCk1"></a> <a name="Q0dJ1"></a> <a name="ZmVhdHVyZXByYWdtYQ1"></a> <a name="cHJhZ21hcztmZWF0dXJl3"></a>When you load a module with <code>use</code>, Perl loads it from disk, then calls its <code>import()</code> method, passing any arguments you provided. By convention, a module&#39;s <code>import()</code> method takes a list of names and exports functions and other symbols into the calling namespace. This is merely convention; a module may decline to provide an <code>import()</code>, or its <code>import()</code> may perform other behaviors. Pragmas (<a href="08-perl-style-efficiency.html#cHJhZ21hcw">Pragmas</a>) such as <code>strict</code> use arguments to change the behavior of the calling lexical scope instead of exporting symbols:</p>

<div class="programlisting">

<pre><code>    use strict;
    # ... calls strict-&gt;import()

    use CGI &#39;:standard&#39;;
    # ... calls CGI-&gt;import( &#39;:standard&#39; )

    use feature qw( say switch );
    # ... calls feature-&gt;import( qw( say switch ) )</code></pre>

</div>

<p content_id="138" id="YnVpbHRpbnM7bm82"> <a name="dW5pbXBvcnRpbmc1"></a>The <code>no</code> builtin calls a module&#39;s <code>unimport()</code> method, if it exists, passing any arguments. This is most common with pragmas which introduce or modify behavior through <code>import()</code>:</p>

<div class="programlisting">

<pre><code>    use strict;
    # no symbolic references or barewords
    # variable declaration required

    {
        no strict &#39;refs&#39;;
        # symbolic references allowed
        # strict &#39;subs&#39; and &#39;vars&#39; still in effect
    }</code></pre>

</div>

<p content_id="139">Both <code>use</code> and <code>no</code> take effect during compilation, such that:</p>

<div class="programlisting">

<pre><code>    use Module::Name qw( list of arguments );</code></pre>

</div>

<p content_id="140">... is the same as:</p>

<div class="programlisting">

<pre><code>    BEGIN
    {
        require &#39;Module/Name.pm&#39;;
        Module::Name-&gt;import( qw( list of arguments ) );
    }</code></pre>

</div>

<p content_id="141">Similarly:</p>

<div class="programlisting">

<pre><code>    no Module::Name qw( list of arguments );</code></pre>

</div>

<p content_id="142">... is the same as:</p>

<div class="programlisting">

<pre><code>    BEGIN
    {
        require &#39;Module/Name.pm&#39;;
        Module::Name-&gt;unimport(qw( list of arguments ));
    }</code></pre>

</div>

<p content_id="143">... including the <code>require</code> of the module.</p>

<div class="tip">
<p content_id="144" class="title">Missing Methods Never Missed</p>
<p content_id="145">If <code>import()</code> or <code>unimport()</code> does not exist in the module, Perl will not give an error message. They are truly optional.</p>

</div><p content_id="146">You <em>may</em> call <code>import()</code> and <code>unimport()</code> directly, though outside of a <code>BEGIN</code> block it makes little sense to do so; after compilation has completed, the effects of <code>import()</code> or <code>unimport()</code> may have little effect.</p>

<p content_id="147" id="bW9kdWxlcztjYXNlLXNlbnNpdGl2aXR51"> <a name="Y2FzZS1zZW5zaXRpdml0eQ1"></a>Both <code>use</code> and <code>require</code> are case-sensitive. While Perl knows the difference between <code>strict</code> and <code>Strict</code>, your combination of operating system and file system may not. If you were to write <code>use Strict;</code>, Perl would not find <em>strict.pm</em> on a case-sensitive filesystem. With a case-insensitive filesystem, Perl would happily load <em>Strict.pm</em>, but nothing would happen when it tried to call <code>Strict-&gt;import()</code>. (<em>strict.pm</em> declares a package named <code>strict</code>.)</p>

<p content_id="148">Portable programs are careful about case even if they don&#39;t have to be.</p>

<h3 id="ZXhwb3J0aW5n"><a name="RXhwb3J0aW5n"></a>Exporting</h3>

<p content_id="149" id="ZXhwb3J0aW5n"> <a name="ZXhwb3J0aW5n1"></a>A module can make package global symbols available to other packages through a process known as <em>exporting</em>—often by calling <code>import()</code> implicitly or directly.</p>

<p content_id="150" id="RXhwb3J0ZXI1"> <a name="RXhwb3J0ZXI7QEVYUE9SVF9PSw1"></a> <a name="RXhwb3J0ZXI7QEVYUE9SVA1"></a>The core module <code>Exporter</code> is the standard way to export symbols from a module. <code>Exporter</code> relies on the presence of package global variables—<code>@EXPORT_OK</code> and <code>@EXPORT</code> in particular—which contain a list of symbols to export when requested.</p>

<p content_id="151">Consider a <code>StrangeMonkey::Utilities</code> module which provides several standalone functions usable throughout the system:</p>

<div class="programlisting">

<pre><code>    package StrangeMonkey::Utilities;

    use Exporter &#39;import&#39;;

    our @EXPORT_OK = qw( round translate screech );

    ...</code></pre>

</div>

<p content_id="152">Any other code now can use this module and, optionally, import any or all of the three exported functions. You may also export variables:</p>

<div class="programlisting">

<pre><code>    push @EXPORT_OK, qw( $spider $saki $squirrel );</code></pre>

</div>

<p content_id="153">Export symbols by default by listing them in <code>@EXPORT</code> instead of <code>@EXPORT_OK</code>:</p>

<div class="programlisting">

<pre><code>    our @EXPORT = qw( monkey_dance monkey_sleep );</code></pre>

</div>

<p content_id="154">... so that any <code>use StrangeMonkey::Utilities;</code> will import both functions. Be aware that specifying symbols to import will <em>not</em> import default symbols; you only get what you request. To load a module without importing any symbols, use an explicit empty list:</p>

<div class="programlisting">

<pre><code>    # make the module available, but import() nothing
    use StrangeMonkey::Utilities ();</code></pre>

</div>

<p content_id="155">Regardless of any import lists, you can always call functions in another package with their fully-qualified names:</p>

<div class="programlisting">

<pre><code>    StrangeMonkey::Utilities::screech();</code></pre>

</div>

<div class="tip">
<p content_id="156" class="title">Simplified Exporting</p>
<a name="Q1BBTjtTdWI6OkV4cG9ydGVy1"></a><p content_id="157">The CPAN module <code>Sub::Exporter</code> provides a nicer interface to export functions without using package globals. It also offers more powerful options. However, <code>Exporter</code> can export variables, while <code>Sub::Exporter</code> only exports functions.</p>

</div><h3 id="T3JnYW5pemluZ0NvZGV3aXRoTW9kdWxlcw"><a name="T3JnYW5pemluZ0NvZGV3aXRoTW9kdWxlcw"></a>Organizing Code with Modules</h3>

<p content_id="158">Perl does not require you to use modules, packages, or namespaces. You may put all of your code in a single <em>.pl</em> file, or in multiple <em>.pl</em> files you <code>require</code> as necessary. You have the flexibility to manage your code in the most appropriate way, given your development style, the formality and risk and reward of the project, your experience, and your comfort with deploying code.</p>

<p content_id="159">Even so, a project with more than a couple of hundred lines of code benefits from module organization:</p>

<ul>

<li>Modules help to enforce a logical separation between distinct entities in the system.</li>

<li>Modules provide an API boundary, whether procedural or OO.</li>

<li>Modules suggest a natural organization of source code.</li>

<li>The Perl ecosystem has many tools devoted to creating, maintaining, organizing, and deploying modules and distributions.</li>

<li>Modules provide a mechanism of code reuse.</li>

</ul>

<p content_id="160">Even if you do not use an object-oriented approach, modeling every distinct entity or responsibility in your system with its own module keeps related code together and separate code separate.</p>

<h2 id="ZGlzdHJpYnV0aW9ucw"><a name="RGlzdHJpYnV0aW9ucw"></a>Distributions</h2>

<p content_id="161" id="ZGlzdHJpYnV0aW9ucw"><a name="ZGlzdHJpYnV0aW9u2"></a>A <em>distribution</em> is a collection of metadata and modules (<a href="09-managing-perl-programs.html#bW9kdWxlcw">Modules</a>) which forms a single redistributable, testable, and installable unit. The easiest way to configure, build, package, test, and install Perl code is to follow the CPAN&#39;s conventions. These conventions govern how to package a distribution, how to resolve its dependencies, where to install software, how to verify that it works, how to display documentation, and how to manage a repository. All of these guidelines have arisen from the rough consensus of thousands of contributors working on tens of thousands of projects. A distribution built to CPAN standards can be tested on several versions of Perl on several different hardware platforms within a few hours of its uploading, with errors reported automatically to authors—all without human intervention.</p>

<p content_id="162">You may choose never to release any of your code as public CPAN distributions, but you <em>can</em> use CPAN tools and conventions to manage even private code. The Perl community has built amazing infrastructure; why not take advantage of it?</p>

<h3 id="QXR0cmlidXRlc29mYURpc3RyaWJ1dGlvbg"><a name="QXR0cmlidXRlc29mYURpc3RyaWJ1dGlvbg"></a>Attributes of a Distribution</h3>

<p content_id="163">Besides one or more modules, a distribution includes several other files and directories:</p>

<ul>

<li><em>Build.PL</em> or <em>Makefile.PL</em>, a driver program used to configure, build, test, bundle, and install the distribution.</li>

<li><em>MANIFEST</em>, a list of all files contained in the distribution. This helps tools verify that a bundle is complete.</li>

<li><em>META.yml</em> and/or <em>META.json</em>, a file containing metadata about the distribution and its dependencies.</li>

<li><em>README</em>, a description of the distribution, its intent, and its copyright and licensing information.</li>

<li><em>lib/</em>, the directory containing Perl modules.</li>

<li><em>t/</em>, a directory containing test files.</li>

<li><em>Changes</em>, a human-readable log of every significant change to the distribution.</li>

</ul>

<p content_id="164" id="Q1BBTjtDUEFOVFM1">A well-formed distribution must contain a unique name and single version number (often taken from its primary module). Any distribution you download from the public CPAN should conform to these standards. The public CPANTS service (<a class="url" href="http://cpants.perl.org/">http://cpants.perl.org/</a>) evaluates each uploaded distribution against packaging guidelines and conventions and recommends improvements. Following the CPANTS guidelines doesn&#39;t mean the code works, but it does mean that the CPAN packaging tools should understand the distribution.</p>

<h3 id="Q1BBTlRvb2xzZm9yTWFuYWdpbmdEaXN0cmlidXRpb25z"><a name="Q1BBTlRvb2xzZm9yTWFuYWdpbmdEaXN0cmlidXRpb25z"></a>CPAN Tools for Managing Distributions</h3>

<p content_id="165">The Perl core includes several tools to manage distributions:</p>

<ul>

<li><code>CPAN.pm</code> is the official CPAN client. While by default this client installs distributions from the public CPAN, you can also use your ownpoint them to your own repository instead of or in addition to the public repository.<a name="TW9kdWxlOjpCdWlsZA2"></a></li>

<li><code>Module::Build</code> is a pure-Perl tool suite for configuring, building, installing, and testing distributions. It works with <em>Build.PL</em> files.<a name="RXh0VXRpbHM6Ok1ha2VNYWtlcg2"></a></li>

<li><code>ExtUtils::MakeMaker</code> is a legacy tool which <code>Module::Build</code> intends to replace. It is still in wide use, though it is in maintenance mode and receives only critical bug fixes. It works with <em>Makefile.PL</em> files.<a name="VGVzdDo6TW9yZQ2"></a></li>

<li><code>Test::More</code> (<a href="09-managing-perl-programs.html#dGVzdGluZw">Testing</a>) is the basic and most widely used testing module used to write automated tests for Perl software.<p content_id="166" id="VEFQOjpIYXJuZXNz2"> <a name="cHJvdmU2"></a></p>

</li>

<li><code>TAP::Harness</code> and <code>prove</code> (<a href="09-managing-perl-programs.html#cnVubmluZ190ZXN0cw">Running Tests</a>) run tests and interpret and report their results.</li>

</ul>

<p content_id="167" id="Q1BBTg3">In addition, several non-core CPAN modules make your life easier as a developer:</p>

<ul>

<li><code>App::cpanminus</code> is a configuration-free CPAN client. It handles the most common cases, uses little memory, and works quickly.<p content_id="168" id="Q1BBTjtBcHA6OnBlcmxicmV32"> <a name="cGVybGJyZXc2"></a></p>

</li>

<li><code>App::perlbrew</code> helps you to manage multiple installations of Perl. Install new versions of Perl for testing or production, or to isolate applications and their dependencies.<p content_id="169" id="Q1BBTjtDUEFOOjpNaW5p2"> <a name="Q1BBTjtjcGFubWluaQ1"></a></p>

</li>

<li><code>CPAN::Mini</code> and the <code>cpanmini</code> command allow you to create your own (private) mirror of the public CPAN. You can inject your own distributions into this repository and manage which versions of the public modules are available in your organization.<p content_id="170" id="Q1BBTjtEaXN0OjpaaWxsYQ1"> <a name="Q1BBTjtNb2R1bGU6OkJ1aWxk1"></a> <a name="RXh0VXRpbHM6Ok1ha2VNYWtlcg3"></a></p>

</li>

<li><code>Dist::Zilla</code> automates away common distribution tasks. While it uses either <code>Module::Build</code> or <code>ExtUtils::MakeMaker</code>, it can replace <em>your</em> use of them directly. See <a class="url" href="http://dzil.org/">http://dzil.org/</a> for an interactive tutorial.<a name="Q1BBTjtUZXN0OjpSZXBvcnRlcg1"></a></li>

<li><code>Test::Reporter</code> allows you to report the results of running the automated test suites of distributions you install, giving their authors more data on any failures.<p content_id="171" id="Y2FydG9u1"> <a name="UGludG81"></a></p>

</li>

<li>Carton and Pinto are two newer projects which help manage and install code&#39;s dependencies. Neither is in widespread use yet, but they&#39;re both under active development.</li>

</ul>

<h3 id="RGVzaWduaW5nRGlzdHJpYnV0aW9ucw"><a name="RGVzaWduaW5nRGlzdHJpYnV0aW9ucw"></a>Designing Distributions</h3>

<p content_id="172" id="Q1BBTjtBcHA6OmNwYW5taW51cw1"> <a name="Y3Bhbm1pbnVz1"></a> <a name="Y3Bhbm01"></a><a name="Q1BBTjtNb2R1bGU6OlN0YXJ0ZXI1"></a>The process of designing a distribution could fill a book (see Sam Tregar&#39;s <em>Writing Perl Modules for CPAN</em>), but a few design principles will help you. Start with a utility such as <code>Module::Starter</code> or <code>Dist::Zilla</code>. The initial cost of learning the configuration and rules may seem like a steep investment, but the benefit of having everything set up the right way (and in the case of <code>Dist::Zilla</code>, <em>never</em> going out of date) relieves you of tedious busywork.</p>

<p content_id="173">A distribution should follow several non-code guidelines:</p>

<ul>

<li><em>Each distribution performs a single, well-defined purpose.</em> That purpose may even include gathering several related distributions into a single installable bundle. Decompose your software into individual distributions to manage their dependencies appropriately and to respect their encapsulation.</li>

<li><em>Each distribution contains a single version number.</em> Version numbers must always increase. The semantic version policy (<a class="url" href="http://semver.org/">http://semver.org/</a>) is sane and compatible with Perl&#39;s approach.</li>

<li><em>Each distribution provides a well-defined API.</em> A comprehensive automated test suite can verify that you maintain this API across versions. If you use a local CPAN mirror to install your own distributions, you can re-use the CPAN infrastructure for testing distributions and their dependencies. You get easy access to integration testing across reusable components.</li>

<li><em>Distribution tests are useful and repeatable.</em> The CPAN infrastructure supports automated test reporting. Use it!</li>

<li><em>Interfaces are simple and effective.</em> Avoid the use of global symbols and default exports; allow people to use only what they need. Do not pollute their namespaces.</li>

</ul>

<h2 id="dW5pdmVyc2Fs"><a name="VGhlVU5JVkVSU0FMUGFja2FnZQ"></a>The UNIVERSAL Package</h2>

<p content_id="174" id="dW5pdmVyc2Fs"><a name="VU5JVkVSU0FM2"></a>Perl&#39;s builtin <code>UNIVERSAL</code> package is the ancestor of all other packages—in the object-oriented sense (<a href="07-object-oriented-perl.html#bW9vc2U">Moose</a>). <code>UNIVERSAL</code> provides a few methods for its children to use, inherit, or override.</p>

<h3 id="VGhlVkVSU0lPTigpTWV0aG9k"><a name="VGhlVkVSU0lPTigpTWV0aG9k"></a>The VERSION() Method</h3>

<p content_id="175" id="VU5JVkVSU0FMOjpWRVJTSU9O1"> <a name="VkVSU0lPTigp2"></a>The <code>VERSION()</code> method returns the value of the <code>$VERSION</code> variable of the invoking package or class. If you provide a version number as an optional parameter, the method will throw an exception if the queried <code>$VERSION</code> is not equal to or greater than the parameter.</p>

<p content_id="176">Given a <code>HowlerMonkey</code> module of version <code>1.23</code>:</p>

<div class="programlisting">

<pre><code>    my $hm = HowlerMonkey-&gt;new;

    say HowlerMonkey-&gt;VERSION;    # prints 1.23
    say $hm-&gt;VERSION;             # prints 1.23
    say $hm-&gt;VERSION( 0.0  );     # prints 1.23
    say $hm-&gt;VERSION( 1.23 );     # prints 1.23
    say $hm-&gt;VERSION( 2.0  );     # exception!</code></pre>

</div>

<p content_id="177">There&#39;s little reason to override <code>VERSION()</code>.</p>

<h3 id="VGhlRE9FUygpTWV0aG9k"><a name="VGhlRE9FUygpTWV0aG9k"></a>The DOES() Method</h3>

<p content_id="178" id="VU5JVkVSU0FMOjpET0VT1"> <a name="RE9FUygp2"></a>The <code>DOES()</code> method supports the use of roles (<a href="07-object-oriented-perl.html#cm9sZXM">Roles</a>) in programs. Pass it an invocant and the name of a role, and the method will return true if the appropriate class somehow does that role—whether through inheritance, delegation, composition, role application, or any other mechanism.</p>

<p content_id="179">The default implementation of <code>DOES()</code> falls back to <code>isa()</code>, because inheritance is one mechanism by which a class may do a role. Given a <code>Cappuchin</code>:</p>

<div class="programlisting">

<pre><code>    say Cappuchin-&gt;DOES( &#39;Monkey&#39;       );  # prints 1
    say $cappy-&gt;DOES(    &#39;Monkey&#39;       );  # prints 1
    say Cappuchin-&gt;DOES( &#39;Invertebrate&#39; );  # prints 0</code></pre>

</div>

<p content_id="180">Override <code>DOES()</code> if you manually consume a role or otherwise somehow provide allomorphic equivalence.</p>

<h3 id="VGhlY2FuKClNZXRob2Q"><a name="VGhlY2FuKClNZXRob2Q"></a>The can() Method</h3>

<p content_id="181" id="VU5JVkVSU0FMOjpjYW42"> <a name="Y2FuKCk2"></a>The <code>can()</code> method takes a string containing the name of a method. It returns a reference to the function which implements that method, if it exists. Otherwise, it returns a false value. You may call this on a class, an object, or the name of a package. In the latter case, it returns a reference to a function, not a method <span class="footnote">... not that you can tell the difference, given only a reference.</span>.</p>

<p content_id="182">Given a class named <code>SpiderMonkey</code> with a method named <code>screech</code>, get a reference to the method with:</p>

<div class="programlisting">

<pre><code>    if (my $meth = SpiderMonkey-&gt;can( &#39;screech&#39; )) {...}</code></pre>

</div>

<p content_id="183">This technique leads to the pattern of checking for a method&#39;s existence before dispatching to it:</p>

<div class="programlisting">

<pre><code>    if (my $meth = $sm-&gt;can( &#39;screech&#39; )
    {
        # method; not a function
        $sm-&gt;$meth();
    }</code></pre>

</div>

<p content_id="184" id="YnVpbHRpbnM7cmVxdWlyZQ1"> <a name="Q1BBTjtVTklWRVJTQUw6OnJlcXVpcmU1"></a>Use <code>can()</code> to test if a package implements a specific function or method:</p>

<div class="programlisting">

<pre><code>    use Class::Load;

    die &quot;Couldn&#39;t load $module!&quot;
        unless load_class( $module );

    if (my $register = $module-&gt;can( &#39;register&#39; ))
    {
        # function; not a method
        $register-&gt;();
    }</code></pre>

</div>

<div class="tip">
<p content_id="185" class="title"><code>Module::Pluggable</code></p>
<p content_id="186" id="Q1BBTjtDbGFzczo6TG9hZA2"> <a name="Q1BBTjtNb2R1bGU6OlBsdWdnYWJsZQ1"></a></p>

<p content_id="187">The CPAN module <code>Class::Load</code> simplifies the work of loading classes by name. Similarly, <code>Module::Pluggable</code> takes most of the work out of building and managing plugin systems. Get to know both distributions.</p>

</div><h3 id="VGhlaXNhKClNZXRob2Q"><a name="VGhlaXNhKClNZXRob2Q"></a>The isa() Method</h3>

<p content_id="188" id="VU5JVkVSU0FMOjppc2E1"> <a name="aXNhKCk2"></a> <a name="U0NBTEFS1"></a> <a name="QVJSQVk1"></a> <a name="SEFTSA1"></a> <a name="UmVnZXhw1"></a> <a name="SU81"></a> <a name="Q09ERQ1"></a>The <code>isa()</code> method takes a string containing the name of a class or the name of a core type (<code>SCALAR</code>, <code>ARRAY</code>, <code>HASH</code>, <code>Regexp</code>, <code>IO</code>, and <code>CODE</code>). Call it as a class method or an instance method on an object. <code>isa()</code> returns a true value if its invocant is or derives from the named class, or if the invocant is a blessed reference to the given type.</p>

<p content_id="189">Given an object <code>$pepper</code> (a hash reference blessed into the <code>Monkey</code> class, which inherits from the <code>Mammal</code> class):</p>

<div class="programlisting">

<pre><code>    say $pepper-&gt;isa( &#39;Monkey&#39;  );  # prints 1
    say $pepper-&gt;isa( &#39;Mammal&#39;  );  # prints 1
    say $pepper-&gt;isa( &#39;HASH&#39;    );  # prints 1
    say Monkey-&gt;isa(  &#39;Mammal&#39;  );  # prints 1

    say $pepper-&gt;isa( &#39;Dolphin&#39; );  # prints 0
    say $pepper-&gt;isa( &#39;ARRAY&#39;   );  # prints 0
    say Monkey-&gt;isa(  &#39;HASH&#39;    );  # prints 0</code></pre>

</div>

<p content_id="190" id="Q1BBTjtUZXN0OjpNb2NrT2JqZWN03"> <a name="Q1BBTjtUZXN0OjpNb2NrTW9kdWxl3"></a>Any class may override <code>isa()</code>. This can be useful when working with mock objects (see <code>Test::MockObject</code> and <code>Test::MockModule</code> on the CPAN) or with code that does not use roles (<a href="07-object-oriented-perl.html#cm9sZXM">Roles</a>). Be aware that any class which <em>does</em> override <code>isa()</code> generally has a good reason for doing so.</p>

<div class="tip">
<p content_id="191" class="title">Does a Class Exist?</p>
<p content_id="192">While both <code>UNIVERSAL::isa()</code> and <code>UNIVERSAL::can()</code> are methods (<a href="11-what-to-avoid-in-perl.html#bWV0aG9kX3N1Yl9lcXVpdmFsZW5jZQ">Method-Function Equivalence</a>), you may <em>safely</em> use the latter as a function solely to determine whether a class exists in Perl. If <code>UNIVERSAL::can( $classname, &#39;can&#39; )</code> returns a true value, someone somewhere has defined a class of the name <code>$classname</code>. That class may not be usable, but it does exist.</p>

</div><h3 id="RXh0ZW5kaW5nVU5JVkVSU0FM"><a name="RXh0ZW5kaW5nVU5JVkVSU0FM"></a>Extending UNIVERSAL</h3>

<p content_id="193">It&#39;s tempting to store other methods in <code>UNIVERSAL</code> to make it available to all other classes and objects in Perl. Avoid this temptation; this global behavior can have subtle side effects, especially in code you didn&#39;t write and don&#39;t maintain, because it is unconstrained.</p>

<p content_id="194" id="Q1BBTjtVTklWRVJTQUw6OnJlZg1"> <a name="Q1BBTjtVTklWRVJTQUw6OmlzYQ1"></a> <a name="Q1BBTjtVTklWRVJTQUw6OmNhbg1"></a> <a name="Q1BBTjtQZXJsOjpDcml0aWM2"></a>With that said, occasional abuse of <code>UNIVERSAL</code> for <em>debugging</em> purposes and to fix improper default behavior may be excusable. For example, Joshua ben Jore&#39;s <code>UNIVERSAL::ref</code> distribution makes the nearly-useless <code>ref()</code> operator usable. The <code>UNIVERSAL::can</code> and <code>UNIVERSAL::isa</code> distributions can help you debug anti-polymorphism bugs (<a href="11-what-to-avoid-in-perl.html#bWV0aG9kX3N1Yl9lcXVpdmFsZW5jZQ">Method-Function Equivalence</a>). <code>Perl::Critic</code> can detect those and other problems.</p>

<p content_id="195">Outside of very carefully controlled code and very specific, very pragmatic situations, there&#39;s no reason to put code in <code>UNIVERSAL</code> directly. There are almost always much better design alternatives.</p>

<h2 id="Y29kZV9nZW5lcmF0aW9u"><a name="Q29kZUdlbmVyYXRpb24"></a>Code Generation</h2>

<p content_id="196" id="Y29kZV9nZW5lcmF0aW9u">Novice programmers write more code than they need to write, partly from unfamiliarity with languages, libraries, and idioms, but also due to inexperience. They start by writing long lists of procedural code, then discover functions, then parameters, then objects, and—perhaps—higher-order functions and closures.</p>

<p content_id="197">As you become a better programmer, you&#39;ll write less code to solve the same problems. You&#39;ll use better abstractions. You&#39;ll write more general code. You can reuse code—and when you can add features by deleting code, you&#39;ll achieve something great.</p>

<p content_id="198" id="bWV0YXByb2dyYW1taW5n2"> <a name="Y29kZWdlbmVyYXRpb241"></a>Writing programs to write programs for you—<em>metaprogramming</em> or <em>code generation</em>—allows you to build reusable abstractions. While you can make a huge mess, you can also build amazing things. For example, metaprogramming techniques make Moose possible (<a href="07-object-oriented-perl.html#bW9vc2U">Moose</a>).</p>

<p content_id="199">The <code>AUTOLOAD</code> technique (<a href="05-perl-functions.html#YXV0b2xvYWQ">AUTOLOAD</a>) for missing functions and methods demonstrates this technique in a specific form: Perl&#39;s function and method dispatch system allows you to control what happens when normal lookup fails.</p>

<h3 id="ZXZhbA"><a name="ZXZhbA"></a>eval</h3>

<p content_id="200" id="ZXZhbDtzdHJpbmc1"> <a name="YnVpbHRpbnM7ZXZhbA2"></a>The simplest code generation technique is to build a string containing a snippet of valid Perl and compile it with the string <code>eval</code> operator. Unlike the exception-catching block <code>eval</code> operator, string <code>eval</code> compiles the contents of the string within the current scope, including the current package and lexical bindings.</p>

<p content_id="201">A common use for this technique is providing a fallback if you can&#39;t (or don&#39;t want to) load an optional dependency:</p>

<div class="programlisting">

<pre><code>    eval { require Monkey::Tracer }
        or eval &#39;sub Monkey::Tracer::log {}&#39;;</code></pre>

</div>

<p content_id="202">If <code>Monkey::Tracer</code> is not available, this code defines a <code>log()</code> function which will do nothing. This simple example is deceptive, because getting <code>eval</code> right takes some work. You must handle quoting issues to include variables within your <code>eval</code>d code. Add more complexity to interpolate some variables but not others:</p>

<div class="programlisting">

<pre><code>    sub generate_accessors
    {
        my ($methname, $attrname) = @_;

        eval &lt;&lt;&quot;END_ACCESSOR&quot;;
        sub get_$methname
        {
            my \$self = shift;
            return \$self-&gt;{$attrname};
        }

        sub set_$methname
        {
            my (\$self, \$value) = \@_;
            \$self-&gt;{$attrname}  = \$value;
        }
    END_ACCESSOR
    }</code></pre>

</div>

<p content_id="203">Woe to those who forget a backslash! Good luck convincing your syntax highlighter what&#39;s happening! Worse yet, each invocation of string <code>eval</code> builds a new data structure representing the entire code. Compiling code isn&#39;t free, either. Yet even with its limitations, this technique is simple and useful.</p>

<h3 id="UGFyYW1ldHJpY0Nsb3N1cmVz"><a name="UGFyYW1ldHJpY0Nsb3N1cmVz"></a>Parametric Closures</h3>

<p content_id="204" id="Y2xvc3VyZXM7cGFyYW1ldHJpYw1">While building accessors and mutators with <code>eval</code> is straightforward, closures (<a href="05-perl-functions.html#Y2xvc3VyZXM">Closures</a>) allow you to add parameters to generated code at compilation time <em>without</em> requiring additional evaluation:</p>

<div class="programlisting">

<pre><code>    sub generate_accessors
    {
        my $attrname = shift;

        my $getter = sub
        {
            my $self = shift;
            return $self-&gt;{$attrname};
        };

        my $setter = sub
        {
            my ($self, $value) = @_;
            $self-&gt;{$attrname} = $value;
        };

        return $getter, $setter;
    }</code></pre>

</div>

<p content_id="205">This code avoids unpleasant quoting issues and compiles each closure only once. It even uses less memory by sharing the compiled code between all closure instances. All that differs is the binding to the <code>$attrname</code> lexical. In a long-running process or a class with a lot of accessors, this technique can be very useful.</p>

<p content_id="206" id="Y2xvc3VyZXM7aW5zdGFsbGluZ2ludG9zeW1ib2x0YWJsZQ1"> <a name="c3ltYm9sdGFibGVz3"></a>Installing into symbol tables is reasonably easy, if ugly:</p>

<div class="programlisting">

<pre><code>    my ($get, $set) = generate_accessors( &#39;pie&#39; );

    no strict &#39;refs&#39;;
    *{ &#39;get_pie&#39; } = $get;
    *{ &#39;set_pie&#39; } = $set;</code></pre>

</div>

<p content_id="207" id="O3NpZ2ls1"> <a name="c2lnaWxzOw1"></a> <a name="dHlwZWdsb2Jz2"></a>The odd syntax of an asterisk <span class="footnote">Think of it as a <em>typeglob sigil</em>, where a <em>typeglob</em> is Perl jargon for &quot;symbol table&quot;.</span> dereferencing a hash refers to a symbol in the current <em>symbol table</em>, which is the section of the current namespace which contains globally-accessible symbols such as package globals, functions, and methods. Assigning a reference to a symbol table entry installs or replaces that entry. To promote an anonymous function to a method, store that function&#39;s reference in the symbol table.</p>

<p content_id="208" id="c3RyaWN0cHJhZ21h1"> <a name="cHJhZ21hcztzdHJpY3Q2"></a>Assigning to a symbol table symbol with a string, not a literal variable name, is a symbolic reference. You must disable <code>strict</code> reference checking for the operation. Many programs have a subtle bug in similar code, as they assign and generate in a single line:</p>

<div class="programlisting">

<pre><code>    no strict &#39;refs&#39;;

    *{ $methname } = sub {
        # subtle bug: strict refs disabled here too
    };</code></pre>

</div>

<p content_id="209">This example disables strictures for the outer block <em>as well as the body of the function itself</em>. Only the assignment violates strict reference checking, so disable strictures for that operation alone:</p>

<div class="programlisting">

<pre><code>    {
        my $sub = sub { ... };

        no strict &#39;refs&#39;;
        *{ $methname } = $sub;
    }</code></pre>

</div>

<p content_id="210">If the name of the method is a string literal in your source code, rather than the contents of a variable, you can assign to the relevant symbol directly:</p>

<div class="programlisting">

<pre><code>    {
        no warnings &#39;once&#39;;
        (*get_pie, *set_pie) =
             generate_accessors( &#39;pie&#39; );
    }</code></pre>

</div>

<p content_id="211">Assigning directly to the glob does not violate strictures, but mentioning each glob only once <em>does</em> produce a &quot;used only once&quot; warning you can disable with the <code>warnings</code> pragma.</p>

<div class="tip">
<p content_id="212" class="title">Symbol Tables Simplified</p>
<a name="Q1BBTjtQYWNrYWdlOjpTdGFzaA2"></a><p content_id="213">Use the CPAN module <code>Package::Stash</code> instead of manipulating symbol tables yourself.</p>

</div><h3 id="Q29tcGlsZS10aW1lTWFuaXB1bGF0aW9u"><a name="Q29tcGlsZS10aW1lTWFuaXB1bGF0aW9u"></a>Compile-time Manipulation</h3>

<p content_id="214" id="YnVpbHRpbnM7ZXZhbA3">Unlike code written explicitly as code, code generated through string <code>eval</code> gets compiled at runtime. Where you might expect a normal function to be available throughout the lifetime of your program, a generated function might not be available when you expect it.</p>

<p content_id="215" id="QkVHSU41">Force Perl to run code—to generate other code—during compilation by wrapping it in a <code>BEGIN</code> block. When the Perl parser encounters a block labeled <code>BEGIN</code>, it parses and compiles the entire block, then runs it (unless it has syntax errors). When it finishes, parsing will continue as if there had been no interruption.</p>

<p content_id="216">The difference between writing:</p>

<div class="programlisting">

<pre><code>    sub get_age    { ... }
    sub set_age    { ... }

    sub get_name   { ... }
    sub set_name   { ... }

    sub get_weight { ... }
    sub set_weight { ... }</code></pre>

</div>

<p content_id="217">... and:</p>

<div class="programlisting">

<pre><code>    sub make_accessors { ... }

    BEGIN
    {
        for my $accessor (qw( age name weight ))
        {
            my ($get, $set) =
                make_accessors( $accessor );

            no strict &#39;refs&#39;;
            *{ &#39;get_&#39; . $accessor } = $get;
            *{ &#39;set_&#39; . $accessor } = $set;
        }
    }</code></pre>

</div>

<p content_id="218">... is primarily one of maintainability.</p>

<p content_id="219" id="QkVHSU47aW1wbGljaXQ1"> <a name="bW9kdWxlcztpbXBsaWNpdEJFR0lO1"></a>Within a module, any code outside of functions executes when you <code>use</code> it, because of the implicit <code>BEGIN</code> Perl adds around the <code>require</code> and <code>import</code> (<a href="05-perl-functions.html#aW1wb3J0aW5n">Importing</a>). Any code outside of a function but inside the module will execute <em>before</em> the <code>import()</code> call occurs. If you <code>require</code> the module, there is no implicit <code>BEGIN</code> block. After parsing finishes, Perl will run code outside of the functions.</p>

<p content_id="220">Beware of the interaction between lexical <em>declaration</em> (the association of a name with a scope) and lexical <em>assignment</em>. The former happens during compilation, while the latter occurs at the point of execution. This code has a subtle bug:</p>

<div class="programlisting">

<pre><code>    use UNIVERSAL::require;

    # buggy; do not use
    my $wanted_package = &#39;Monkey::Jetpack&#39;;

    BEGIN
    {
        $wanted_package-&gt;require;
        $wanted_package-&gt;import;
    }</code></pre>

</div>

<p content_id="221">... because the <code>BEGIN</code> block will execute <em>before</em> the assignment of the string value to <code>$wanted_package</code> occurs. The result will be an exception from attempting to invoke the <code>require()</code> method <span class="footnote"><code>UNIVERSAL::require</code> adds a <code>require()</code> method to <code>UNIVERSAL</code>.</span> on an undefined value.</p>

<h3 id="Y2xhc3NfbW9w"><a name="Q2xhc3M6Ok1PUA"></a>Class::MOP</h3>

<p content_id="222" id="Y2xhc3NfbW9w"><a name="Q2xhc3M6Ok1PUA2"></a> <a name="TW9vc2U1"></a> <a name="b2JqZWN0czttZXRhb2JqZWN0cHJvdG9jb2w1"></a> <a name="bWV0YW9iamVjdHByb3RvY29s1"></a>Unlike installing function references to populate namespaces and to create methods, there&#39;s no simple way to create classes at runtime in Perl. Moose comes to the rescue, with its bundled <code>Class::MOP</code> library. It provides a <em>meta object protocol</em>—a mechanism for creating and manipulating an object system by manipulating objects.</p>

<p content_id="223">Rather than writing your own fragile string <code>eval</code> code or trying to poke into symbol tables manually, you can manipulate the entities and abstractions of your program with objects and methods.</p>

<p content_id="224">To create a class:</p>

<div class="programlisting">

<pre><code>    use Class::MOP;

    my $class = Class::MOP::Class-&gt;create(
                    &#39;Monkey::Wrench&#39;
                );</code></pre>

</div>

<p content_id="225" id="bWV0YWNsYXNz1"> <a name="T087bWV0YWNsYXNz1"></a>Add attributes and methods to this class when you create it:</p>

<div class="programlisting">

<pre><code>    my $class = Class::MOP::Class-&gt;create(
        &#39;Monkey::Wrench&#39; =&gt;
        (
            attributes =&gt;
            [
                Class::MOP::Attribute-&gt;new(&#39;$material&#39;),
                Class::MOP::Attribute-&gt;new(&#39;$color&#39;),
            ]
            methods =&gt;
            {
                tighten =&gt; sub { ... },
                loosen  =&gt; sub { ... },
            }
        ),
    );</code></pre>

</div>

<p content_id="226">... or to the metaclass (the object which represents that class) once created:</p>

<div class="programlisting">

<pre><code>    $class-&gt;add_attribute(
        experience =&gt; Class::MOP::Attribute-&gt;new(&#39;$xp&#39;)
    );

    $class-&gt;add_method( bash_zombie =&gt; sub { ... } );</code></pre>

</div>

<p content_id="227">You can inspect the metaclass:</p>

<div class="programlisting">

<pre><code>    my @attrs = $class-&gt;get_all_attributes;
    my @meths = $class-&gt;get_all_methods;</code></pre>

</div>

<p content_id="228" id="Q1BBTjtDbGFzczo6TU9QOjpBdHRyaWJ1dGU1"> <a name="Q1BBTjtDbGFzczo6TU9QOjpNZXRob2Q1"></a>Similarly <code>Class::MOP::Attribute</code> and <code>Class::MOP::Method</code> allow you to create and manipulate and introspect attributes and methods.</p>

<h2 id="b3ZlcmxvYWRpbmc"><a name="T3ZlcmxvYWRpbmc"></a>Overloading</h2>

<p content_id="229" id="b3ZlcmxvYWRpbmc"> <a name="b3ZlcmxvYWRpbmc1"></a>Perl is not a pervasively object oriented language. Its core data types (scalars, arrays, and hashes) are not objects with methods, but you <em>can</em> control the behavior of your own classes and objects, especially when they undergo coercion or contextual evaluation. This is <em>overloading</em>.</p>

<p content_id="230">Overloading is subtle but powerful. An interesting example is overloading how an object behaves in boolean context. In boolean context, an object will evaluate to a true value, unless you overload boolification.</p>

<div class="tip">
<p content_id="231" class="title">Overloading Boolean Context</p>
<p content_id="232">Why overload boolean context? Suppose you&#39;re using the Null Object pattern (<a class="url" href="http://www.c2.com/cgi/wiki?NullObject">http://www.c2.com/cgi/wiki?NullObject</a>) to make your own objects appear false in boolean context.</p>

</div><p content_id="233">You can overload what the object does for almost every operation or coercion: stringification, numification, boolification, iteration, invocation, array access, hash access, arithmetic operations, comparison operations, smart match, bitwise operations, and even assignment. Stringification, numification, and boolification are the most important and most common.</p>

<h3 id="T3ZlcmxvYWRpbmdDb21tb25PcGVyYXRpb25z"><a name="T3ZlcmxvYWRpbmdDb21tb25PcGVyYXRpb25z"></a>Overloading Common Operations</h3>

<p content_id="234" id="b3ZlcmxvYWRpbmc7Ym9vbGVhbg1"> <a name="b3ZlcmxvYWRpbmc7bnVtZXJpYw1"></a> <a name="b3ZlcmxvYWRpbmc7c3RyaW5n1"></a> <a name="b3ZlcmxvYWRwcmFnbWE1"></a> <a name="cHJhZ21hcztvdmVybG9hZA1"></a>The <code>overload</code> pragma associates functions with overloadable operations. Passing argument pairs, where the key is the name of a type of overload and the value is a function reference. A <code>Null</code> class which overloads boolean evaluation so that it always evaluates to a false value might resemble:</p>

<div class="programlisting">

<pre><code>    package Null
    {
        use overload &#39;bool&#39; =&gt; sub { 0 };

        ...
    }</code></pre>

</div>

<p content_id="235">It&#39;s easy to add a stringification:</p>

<div class="programlisting">

<pre><code>    package Null
    {
        use overload
            &#39;bool&#39; =&gt; sub { 0 },
            <strong>&#39;&quot;&quot;&#39;   =&gt; sub { &#39;(null)&#39; };</strong>
    }</code></pre>

</div>

<p content_id="236">Overriding numification is more complex, because arithmetic operators tend to be binary ops (<a href="04-perl-operators.html#YXJpdHk">Arity</a>). Given two operands both with overloaded methods for addition, which overloading should take precedence? The answer needs to be consistent, easy to explain, and understandable by people who haven&#39;t read the source code of the implementation.</p>

<p content_id="237"><code>perldoc overload</code> attempts to explain this in the sections labeled <em>Calling Conventions for Binary Operations</em> and <em>MAGIC AUTOGENERATION</em>, but the easiest solution is to overload numification (keyed by <code>&#39;0+&#39;</code>) and tell <code>overload</code> to use the provided overloads as fallbacks where possible:</p>

<div class="programlisting">

<pre><code>    package Null
    {
        use overload
            &#39;bool&#39;   =&gt; sub { 0 },
            &#39;&quot;&quot;&#39;     =&gt; sub { &#39;(null)&#39; },
            <strong>&#39;0+&#39;     =&gt; sub { 0 },</strong>
            <strong>fallback =&gt; 1;</strong>
    }</code></pre>

</div>

<p content_id="238">Setting <code>fallback</code> to a true value lets Perl use any other defined overloads to compose the requested operation when possible. If that&#39;s not possible, Perl will act as if there were no overloads in effect. This is often what you want.</p>

<p content_id="239">Without <code>fallback</code>, Perl will only use the specific overloadings you have provided. If someone tries to perform an operation you have not overloaded, Perl will throw an exception.</p>

<h3 id="T3ZlcmxvYWRhbmRJbmhlcml0YW5jZQ"><a name="T3ZlcmxvYWRhbmRJbmhlcml0YW5jZQ"></a>Overload and Inheritance</h3>

<p content_id="240" id="b3ZlcmxvYWRpbmc7aW5oZXJpdGFuY2U1">Subclasses inherit overloadings from their ancestors. They may override this behavior in one of two ways. If the parent class uses overloading as shown, with function references provided directly, a child class <em>must</em> override the parent&#39;s overloaded behavior by using <code>overload</code> directly.</p>

<p content_id="241">If you&#39;re writing a parent class, use the <em>name</em> of a method rather than a function reference. That&#39;ll allow child classes to prove their own overloadings by overriding the named methods:</p>

<div class="programlisting">

<pre><code>    package Null
    {
        use overload
            &#39;bool&#39;   =&gt; &#39;get_bool&#39;,
            &#39;&quot;&quot;&#39;     =&gt; &#39;get_string&#39;,
            &#39;0+&#39;     =&gt; &#39;get_num&#39;,
            fallback =&gt; 1;
    }</code></pre>

</div>

<p content_id="242">Any child class can do something different for boolification by overriding <code>get_bool()</code>, for example.</p>

<h3 id="VXNlc29mT3ZlcmxvYWRpbmc"><a name="VXNlc29mT3ZlcmxvYWRpbmc"></a>Uses of Overloading</h3>

<p content_id="243" id="Q1BBTjtJTzo6QWxs1">Overloading may seem like a tempting tool to use to produce symbolic shortcuts for new operations, but it&#39;s rare for a good reason. The <code>IO::All</code> CPAN distribution pushes this idea to its limit. In return, you get a simple and elegant API. Yet for every brilliant API refined through the appropriate use of overloading, a dozen more messes congeal. Sometimes the best code eschews cleverness in favor of simplicity.</p>

<p content_id="244">Overriding addition, multiplication, and even concatenation on a <code>Matrix</code> class makes sense, only because the existing notation for those operations is pervasive. A new problem domain without that established notation is a poor candidate for overloading, as is a problem domain where you have to squint to make Perl&#39;s existing operators match a different notation.</p>

<p content_id="245">Damian Conway&#39;s <em>Perl Best Practices</em> suggests one other use for overloading: to prevent the accidental abuse of objects. For example, overloading numification to <code>croak()</code> for objects which have no reasonable single numeric representation can help you find and fix real bugs.</p>

<h2 id="dGFpbnQ"><a name="VGFpbnQ"></a>Taint</h2>

<p content_id="246" id="dGFpbnQ">Some Perl features can help you write secure programs. These tools are no substitute for careful thought and planning, but they <em>reward</em> caution and understanding and can help you avoid subtle mistakes.</p>

<h3 id="VXNpbmdUYWludE1vZGU"><a name="VXNpbmdUYWludE1vZGU"></a>Using Taint Mode</h3>

<p content_id="247" id="dGFpbnQ1"><em>Taint mode</em> (or <em>taint</em>) is a sticky piece of metadata attached to all data which comes from outside of your program. Any data derived from tainted data is also tainted. You may use tainted data within your program, but if you use it to affect the outside world—if you use it insecurely—Perl will throw a fatal exception.</p>

<p content_id="248"><code>perldoc perlsec</code> explains taint mode in copious detail.</p>

<p content_id="249" id="LVQ7dGFpbnRjb21tYW5kLWxpbmVhcmd1bWVudA1"> <a name="Y29tbWFuZC1saW5lYXJndW1lbnRzOy1U1"></a> <a name="JUVOVg1"></a>Launch your program with the <code>-T</code> command-line argument to enable taint mode. If you use this argument on the <code>#!</code> line of a program, you must run the program directly. If you run it as <code>perl mytaintedappl.pl</code> and neglect the <code>-T</code> flag, Perl will exit with an exception—by the time Perl encounters the flag on the <code>#!</code> line, it&#39;s missed its opportunity to taint the environment data which makes up <code>%ENV</code>, for example.</p>

<h3 id="U291cmNlc29mVGFpbnQ"><a name="U291cmNlc29mVGFpbnQ"></a>Sources of Taint</h3>

<p content_id="250">Taint can come from two places: file input and the program&#39;s operating environment. The former is anything you read from a file or collect from users in the case of web or network programming. The latter includes any command-line arguments, environment variables, and data from system calls. Even operations such as reading from a directory handle produce tainted data.</p>

<p content_id="251" id="U2NhbGFyOjpVdGls6"> <a name="dGFpbnRlZCgp1"></a> <a name="dGFpbnQ7Y2hlY2tpbmc1"></a>The <code>tainted()</code> function from the core module <code>Scalar::Util</code> returns true if its argument is tainted:</p>

<div class="programlisting">

<pre><code>    die &#39;Oh no! Tainted data!&#39;
        if Scalar::Util::tainted( $suspicious_value );</code></pre>

</div>

<h3 id="UmVtb3ZpbmdUYWludGZyb21EYXRh"><a name="UmVtb3ZpbmdUYWludGZyb21EYXRh"></a>Removing Taint from Data</h3>

<p content_id="252" id="dGFpbnQ7dW50YWludGluZw1"> <a name="dW50YWludGluZw1"></a>To remove taint, you must extract known-good portions of the data with a regular expression capture. That captured data will be untainted.</p>

<p content_id="253">For example, if your user input consists of a US telephone number, you can untaint it with:</p>

<div class="programlisting">

<pre><code>    die &#39;Number still tainted!&#39;
        unless $number =~ /(\(/d{3}\) \d{3}-\d{4})/;

    my $safe_number = $1;</code></pre>

</div>

<p content_id="254">The more specific your pattern is about what you allow, the more secure your program can be. The opposite approach of <em>denying</em> specific items or forms runs the risk of overlooking something harmful. Far better to disallow something that&#39;s safe but unexpected than that to allow something harmful which appears safe. Even so, nothing prevents you from writing a capture for the entire contents of a variable—but in that case, why use taint?</p>

<h3 id="UmVtb3ZpbmdUYWludGZyb210aGVFbnZpcm9ubWVudA"><a name="UmVtb3ZpbmdUYWludGZyb210aGVFbnZpcm9ubWVudA"></a>Removing Taint from the Environment</h3>

<p content_id="255" id="dGFpbnQ7cmVtb3Zpbmdzb3VyY2Vzb2Y1">The superglobal <code>%ENV</code> represents environment variables for the system. This data is tainted because forces outside of the program&#39;s control can manipulate values there. Any environment variable which modifies how Perl or the shell finds files and directories is an attack vector. A taint-sensitive program should delete several keys from <code>%ENV</code> and set <code>$ENV{PATH}</code> to a specific and well-secured path:</p>

<div class="programlisting">

<pre><code>    delete @ENV{ qw( IFS CDPATH ENV BASH_ENV ) };
    $ENV{PATH} = &#39;/path/to/app/binaries/&#39;;</code></pre>

</div>

<p content_id="256">If you do not set <code>$ENV{PATH}</code> appropriately, you will receive messages about its insecurity. If this environment variable contained the current working directory, or if it contained relative directories, or if the directories specified had world-writable permissions, a clever attacker could hijack system calls to perpetrate mischief.</p>

<p content_id="257">For similar reasons, <code>@INC</code> does not contain the current working directory under taint mode. Perl will also ignore the <code>PERL5LIB</code> and <code>PERLLIB</code> environment variables. Use the <code>lib</code> pragma or the <code>-I</code> flag to <code>perl</code> to add library directories to the program.</p>

<h3 id="VGFpbnRHb3RjaGFz"><a name="VGFpbnRHb3RjaGFz"></a>Taint Gotchas</h3>

<p content_id="258">Taint mode is all or nothing. It&#39;s either on or off. This sometimes leads people to use permissive patterns to untaint data, and gives the illusion of security. In that case, taint is busywork which provides no real security. Review your untainting rules carefully.</p>

<p content_id="259" id="LXQ7ZW5hYmxlYmFieXRhaW50Y29tbWFuZC1saW5lYXJndW1lbnQ1"> <a name="Y29tbWFuZC1saW5lYXJndW1lbnRzOy101"></a>Unfortunately, not all modules handle tainted data appropriately. This is a bug which CPAN authors should take seriously. If you have to make legacy code taint-safe, consider the use of the <code>-t</code> flag, which enables taint mode but reduces taint violations from exceptions to warnings. This is not a substitute for full taint mode, but it allows you to secure existing programs without the all or nothing approach of <code>-T</code>.</p>


        </div>