% layout 'wrapper';
<div class="span8">

<h1 id="VGhlUGVybFBoaWxvc29waHk"><a name="VGhlUGVybFBoaWxvc29waHk"></a>Философия Perl</h1>

<p content_id="663">Perl добивается цели — он гибкий, снисходительный, и податливый.Умелые программисты используют его каждый день для всего, от однострочников и одноразовых автоматизаций 
до многолетных проектов, над которыми трудятся много программистов.</p>

<p content_id="664">Perl прагматичен. Все в Ваших руках. Вы выбираете как решать вашы проблемы и 
Perl будет формировать себя делать то, что вы имеете в виду, с небольшой фрустрацией и никакой церемонией.</p>

<p content_id="665">Perl будет расти вместе с вами. В течении следующего часа, вы узнаете достаточного, для написания реально полезных программ, и вы поймете <em>как</em> работает язык и <em>почему</em> он ранотает именно так. Modern Perl использует эти знания и совместный опыт мирового Perl сообщества чтобы помочь вам писать писать рабочий, сопровождаемый код.</p>

<p content_id="666">Во первых, Вы должны знать, как узнать больше.</p>

<h2 id="cGVybGRvYw"><a name="UGVybGRvYw"></a>Perldoc</h2>

<p content_id="667" id="cGVybGRvYw"><a name="cGVybGRvYw1"></a>У Perl есть культура полезной документации. Утилита <code>perldoc</code> входит в комплекет стандартной установки Perl. <span class="footnote">Тем не менее, в вашей Unix подобной системе может потребоватся установить дополнителные пакеты, такие как <code>perl-doc</code> в Debian или Ubuntu GNU/Linux.</span>. Утилита командной строки <code>perldoc</code>  показывает документацию каждого Perl модуля установленного в системе — будь то  основной модуль или установленный через CPAN (Comprehensive Perl Archive Network ) — а также тисячи страниц основной Perl документации.</p>

<div class="sidebar">

<p content_id="668" id="Q1BBTg1"> <a name="bWV0YWNwYW41"></a></p>

<p content_id="669"><a class="url" href="http://perldoc.perl.org/">http://perldoc.perl.org/</a> содержит последние версии документации Perl. CPAN расположенный на <a class="url" href="http://search.cpan.org/">http://search.cpan.org/</a> и <a class="url" href="http://metacpan.org/">http://metacpan.org/</a> содержит документацию по всем CPAN модулям. Другие дистрибутиви, такие как ActivePerl и Strawberry Perl,содержат локальную документацию в формате HTML.</p>

</div>

<p content_id="670">Используейте <code>perldoc</code> для чтения документации по модулю или части основной документации:</p>

<div class="screen">
<pre><code>    $ <strong>perldoc List::Util</strong>
    $ <strong>perldoc perltoc</strong>
    $ <strong>perldoc Moose::Manual</strong></code></pre>

</div><p content_id="671">Первый пример показывает чтение встроенной документации модуля <code>List::Util</code>. Втрой пример показывает полный файл документации, в данном случае оглавление основной документации. Третий пример показывает полный файл документации встроенный в часть CPAN дистрибутива (<a href="07-object-oriented-perl.html#bW9vc2U">Moose</a>). <code>perldoc</code> скрывает эти детали; нет никакого различия между чтением документации по основным библиотекам, таким как <code>Data::Dumper</code>, и установленным с CPAN. Эта консистенция является преимуществом для вас — культура Perl оценивает документацию так, что даже внешние библиотеки склонны следовать хорошему примеру основной языковой документации.</p>

<p content_id="672">Стандартный шаблон документации включает описание модуля, демонстрирует типовое использование, и после содержит детальное обяснение модуля и его интерфейса. Несмотря на то что объем документации зависит от автора, форма документации удивительно последовательна.</p>

<div class="tip">
<p content_id="673" class="title">Как читать документацию</p>
<p content_id="674">Perl имеет много документации. С чего начать?</p>

<p content_id="675"><code>perldoc perltoc</code> выведет оглавление основной документации , и <code>perldoc perlfaq</code> выведет оглавление Часто Задаваемых Вопросов (FAQ) о Perl. <code>perldoc perlop</code> и <code>perldoc perlsyn</code> описивают символические операции и синтаксические конструкции Perl. <code>perldoc perldiag</code> обьясняют значения предупреждающих (warnings) сообщений Perl. В <code>perldoc perlvar</code> перечислены все символические переменные в Perl. Просмотрение этих файлов даст вам большой обзор языка.</p>

</div><p content_id="676" id="cGVybGRvYzstcShzZWFyY2hwZXJsZmFxKQ1">Утилита <code>perldoc</code> имеет гораздо больше возможностей (смотри <code>perldoc perldoc</code>). Для поиска Perl FAQ, uиспользуйте опцию <code>-q</code> с ключевым словом. К примеру, <code>perldoc -q sort</code> возвращяет три вопроса: <em>How do I sort an array by (anything)?</em>, <em>How do I sort a hash (optionally by value instead of key)?</em>, and <em>How can I always keep my hash sorted?</em>.</p>

<p content_id="677" id="cGVybGRvYzstZihzZWFyY2hwZXJsZnVuYyk1">Опция <code>-f</code> выведет документацию по встроенной функции Perl функции. <code>perldoc -f sort</code> обясняет поведение оператора <code>sort</code> . Если вы не знаете имя нужной функции, просматрите список доступных команд в <code>perldoc perlfunc</code>.</p>

<p content_id="678" id="cGVybGRvYzstdihzZWFyY2hwZXJsdmFyKQ1">Опция <code>-v</code> ищет встроенную переменную. К примеру, <code>perldoc -v $PID</code> выводит документацию по переменной, которая содержит идентификатор процесса текущей программы. В зависимости от вашего shell, вам вероятно придется указать соответствующую переменную.</p>

<p content_id="679">Опция <code>-l</code>  указывает <code>perldoc</code>  показать не содержимое документации а путь (<em>path</em>) к файлу документации. <span class="footnote">Имейте ввиду, что модуль может иметь отдельный <em>.pod</em> файл в дополнение к <em>.pm</em> файлу.</span>.</p>

<p content_id="680">Опция <code>-m</code> выдает содержимое модуля, код и все, без какого либо форматирования.</p>

<p content_id="681" id="UE9E1"> <a name="UE9EO3Blcmxkb2M1"></a> <a name="UE9EO3BvZGNoZWNrZXI1"></a> <a name="UE9EO1BvZDo6V2Vic2VydmVy1"></a> <a name="Q1BBTjtQb2Q6OldlYnNlcnZlcg1"></a>Perl использует формат документации именуемый <em>POD</em>, что я вляется сокращением для <em>Plain Old Documentation</em>. <code>perldoc perlpod</code> описывает как POD работает. Есть также POD инструменты <code>podchecker</code>, который проверяет структуру POD документов, и <code>Pod::Webserver</code> - модуль CPAN, который показывает локальный POD как HTML через минимальный веб сервер.</p>

<h2 id="ZXhwcmVzc2l2aXR5"><a name="RXhwcmVzc2l2aXR5"></a>Выразительность</h2>

<p content_id="682" id="ZXhwcmVzc2l2aXR5"><a name="V2FsbCxMYXJyeQ1"></a> <a name="TGFycnlXYWxs1"></a>Larry Wall изучал лингвистику и человеческие языки. Потом он разработал Perl. В отличие от других языков, разработанных с математическим уклоном, Perl учитивает то, как люди общаются. Взамен Вы получаете свободу решения организации ваших программ, для удовлетворения ваших нужд. Вы можете написать простой, незамысловатый код или объеденить много мельких частей в более крупные программы. Вы можете выбрать из множества парадигм проектирования,и вы можете обойти или использовать дополнительные возможности.</p>

<p content_id="683">Там, где другие языки утверждают, что должен быть только один лучший способ решения любой проблемы, Perl позволяет <em>Вам</em> решить что является наиболее читаемым, наиболее полезным, наиболее привлекательным, или наиболее веселым.</p>

<p content_id="684" id="VElNVE9XVERJ1"> <a name="VGltVG9hZHk1"></a>У Perl хакеров есть слоган: <em>TIMTOWTDI</em>, провозглашенный &quot;Tim Toady&quot;, или &quot;There&#39;s more than one way to do it!&quot; (Есть больше одного сбособа сделать это!)</p>

<p content_id="685">Хотя такая експрессивность позоляет мастерам ремесла создавать изумительные програмы, она также позволяет неосторожным создавать путаницу. Опыт и хороший вкус будут напрявлять вас в процессе разработки вашего кода,но выбор всегда ваш. Проявляйте себя, но учитиваете читаемость и поддерживаемость, особенно для тех кто придет после вас.</p>

<p content_id="686">Изучение Perl похоже на изучение какого нибудь разговорного языка. Вы учите несколько слов, затем соединяете их в предложения, и затем наслаждаетесь простым разговором. Мастерство приходит с практикой чтения и написания кода. Вам не обязательно понимать все детали Perl что бы быть продуктивным, однако принципы, описанные в данной главе, жизненно важны для Вашего развития как програмиста.</p>

<p content_id="687">Perl новички часто находят некоторые синтаксические конструкции неясными.Эти идиомы (<a href="10-perl-beyond-syntax.html#aWRpb21z">Идиомы</a>) очень мощные в руках опытных программистов,однако вполне нормально избегать их до того как вы освоитесь с ними.</p>

<p content_id="688">Еще одна архитектурная особенность в том, что Perl пытается избежать неожидонностей для опытных (Perl) программистов.К примеру, суммированние двух переменных (<code>$first_num + $second_num</code>) очевидно числовая операция (<a href="04-perl-operators.html#bnVtZXJpY19vcGVyYXRvcnM">Numeric Operators</a>);оператор суммирования должен рассматривать оба значения как числа что бы выдать числовой реаультат.Вне зависимости от содержания  <code>$first_num</code> и <code>$second_num</code>,Perl преобразует их в числовые значения (<a href="03-perl-language.html#bnVtZXJpY19jb2VyY2lvbg">Числовое принуждение</a>).Вы виразили свое намерение рассматривать их как числа используя числовой оператор. Perl с радостью делает это.</p>

<p content_id="689" id="RFdJTQ1"> <a name="cHJpbmNpcGxlb2ZsZWFzdGFzdG9uaXNobWVudA1"></a>Эксперты Perl часто называют этот принцип <em>DWIM</em>, or <em>do what I mean (делай то что я имею ввиду)</em>. Вы могли бы также сказать что Perl следует <em>принципу наименьшего удивления</em>. Даже поверхностное понимания Perl (особенно контекст; <a href="01-perl-philosophy.html#Y29udGV4dF9waGlsb3NvcGh5">Контекст</a>),должно хватить для понятия незнакомого Perl выражения. Вы разовьете это умение по мене изучения Perl.</p>

<p content_id="690" id="YmFieVBlcmw1">Выразительность Perl позволяют новичкам писать полезные программы без понимания всего языка. Это дизайн! Опытные разработчики часто называют резултать <em>baby Perl</em>. Это ласковое обращение, поскольку все начинают как новичок. Практикуясь и учась у более опытных программистов, вы будете понимать и принимать более мощьные идиомы и техники. Это нормально для вас - писать простой код, который вы понимаете. Продолжайте практиковатся и вы станете a носителем языа.</p>

<p content_id="691">Опытный Perl хакер может утроить список чисел таким кодом:</p>

<div class="programlisting">

<pre><code>    my @tripled = map { $_ * 3 } @numbers;</code></pre>

</div>

<p content_id="692">... а Perl эксперт может написать:</p>

<div class="programlisting">

<pre><code>    my @tripled;

    for my $num (@numbers)
    {
        push @tripled, $num * 3;
    }</code></pre>

</div>

<p content_id="693">... когда новичок может попробовать так:</p>

<div class="programlisting">

<pre><code>    my @tripled;

    for (my $i = 0; $i &lt; scalar @numbers; $i++)
    {
        $tripled[$i] = $numbers[$i] * 3;
    }</code></pre>

</div>

<p content_id="694">Каждая программа делает одно и то же, но каждая использует Perl по разному.</p>

<p content_id="695">Когда вы будете чуствовать себя более комфортно с Perl, вы можете позволить языку сделать большее для вас. С опытом вы можете сфокусироватся на том <em>что<em> вы хотите сделать а не <em>как<em> вы хотите сделать это. Тем не менее, Perl с радостью работает с baby Perl так же как с экспертным Perl. Вы можете спроектировать и совершеншествовать ваши программы для ясности, выразительности, повторного использования и поддерживаемости отдельно или в целом. Воспользуйтесь этой гибкостью и прагматизмом: гораздо лучше выпполнить вашу задачу эффективно сейчас чем писать концептуально чистую и красивую программу в следующем году.</p>

<h2 id="Y29udGV4dF9waGlsb3NvcGh5"><a name="Q29udGV4dA"></a>Контекст</h2>

<p content_id="696" id="Y29udGV4dF9waGlsb3NvcGh5"><a name="Y29udGV4dA1"></a>В разговорных языках значение слова или фразы может зависить от того как вы употребили его; частный <em>контекст</em> помогает прояснить намерение.К примеру, несоответствующая плюрализация &quot;Пожалуйста дай мне один гамбургеры!&quot;<span class="footnote">Плюрализация существительного отличается от количества, </span> звучит неправильно, как неверного пола  &quot;la gato&quot (кот по испанский); <span class="footnote">Приставка женского рода, однако существительное мужского. </span> это вызовет хихикание у носителей языка. Некоторые слова имеют двойное значение; одна овца на английском sheep когда как две овцы тоже sheep.</p>

<p content_id="697">Контекст в Perl аналогичен. Он описивает <em>количество</em> так же как <em>вид</em> используемых данных. Perl сделает то что вы имели ввиду с данными если вы выберите соответствующий контекст для этих данных.</p>

<p content_id="698">К примеру, некоторые Perl операдоры ведут себя по разному, когда вы ожидаете ноль, единицу или много результатов. Конкретная конструкция в Perl может сделать по разному если вы пишете &quot;Сделай это, но я не волнуюсь о результате&quot; в сравнении с &quot;Сделай это и дай мне множественный результат.&quot; Другие операции позволяют вам задавать ожидаете ли вы числовие данные, текстовые, или истынные или ложные данные.</p>

<p content_id="699">Контекст может быть запутанным, если вы пытаетесь писать или читать Perl код как серию отдельных шагов в изоляции. Perl работает не так! Каждое выражение является частю большего контекста. Вы можете долго ломать голову отлаживая код, пока не обнаружите что ваши предположения по поводу контекста были не верны. Если же вместо этого вы будете помнить о контексте, ваш код будет более корректным и чистым, гибким и более кратким.</p>

<h3 id="YW1vdW50X2NvbnRleHQ"><a name="Vm9pZCxTY2FsYXIsYW5kTGlzdENvbnRleHQ"></a>Пустой, скалярный и списковый Контекст</h3>

<p content_id="700" id="YW1vdW50X2NvbnRleHQ"><a name="Y29udGV4dDthbW91bnQ1"></a> <a name="YW1vdW50Y29udGV4dA1"></a>
<em>Количественный контекст</em> регулирует <em>сколько</em> сущностей вы ожидаете от операции. Соглашение о числе подчиненного глагола в английском - близкая паралелль. Даже не зная формального описания этого лингвистического принципа, вы навярняка поймете ошибку в предложении &quot;Perl are a fun language&quot;. <span class="footnote"> В терминах количественного контекста, вы можете сказать глагол  &quot;are&quot; ожидая множество существительных.</span>. В Perl, количество элементов которые вы запрашиваете определяет то сколько вы получите.</p>

<p content_id="701" id="dm9pZGNvbnRleHQ1"> <a name="Y29udGV4dDt2b2lk1"></a>Предположим функция (<a href="05-perl-functions.html#ZnVuY3Rpb25z">Обьявление функций</a>) по имени <code>find_chores()</code> сортирует список ваших домашних дел по порядку важности задач. Номер домашнего задания, который вы ожидаете прочитать из вашего списка определяет что именно функция будет делать. Если вы ничего не ожидаете, вы просто притворяетесь что заняты. Если вы ожидаете одно задание, вам есть что делать ближайшие пятдесят минут. Если у вас прилив енергии в свободные выходные, вы можете взять все домашние задания.</p>

<p content_id="702">Когда вы вызываете функцию самостоятельно и никогда не используете его возвращяемое значение, вы используете <em>пустой контекст</em>:</p>

<div class="programlisting">

<pre><code>    find_chores();</code></pre>

</div>

<p content_id="703" id="Y29udGV4dDtzY2FsYXI1"> <a name="c2NhbGFyY29udGV4dA1"></a>Присваивание возвращяемого значения фунции одному елементу (<a href="03-perl-language.html#c2NhbGFycw">Скаляры</a>) обеспечивает <em>скалярный контекст</em>:</p>

<div class="programlisting">

<pre><code>    my $single_result = find_chores();</code></pre>

</div>

<p content_id="704" id="bGlzdGNvbnRleHQ1"> <a name="Y29udGV4dDtsaXN01"></a>Присваивание результата вызываемой функции массиву (<a href="03-perl-language.html#YXJyYXlz">Массивы</a>) или списку, или использование его в списке, выплоняет функцию в <em>списочном контексте</em>:</p>

<div class="programlisting">

<pre><code>    my @all_results             = find_chores();
    my ($single_element, @rest) = find_chores();

    # list of results passed to a function
    process_list_of_results( find_chores() );</code></pre>

</div>

<p content_id="705">Скобки на второй строчке предыдущего примера группирует два определения переменных (<a href="05-perl-functions.html#bGV4aWNhbF9zY29wZQ">Лексический контекст</a>) в один елемент и поэтому это присваивание присваивается обоим переменным. Заметтье, что одноелементный список все же является списком. Вы также корректно могли написать:</p>

<div class="programlisting">

<pre><code>    my <strong>(</strong>$single_element<strong>)</strong>   = find_chores();</code></pre>

</div>

<p content_id="706">.... в таком случае круглые скобки подсказывают парсеру Perl что вы подразумеваете списковый контекст для присваивания даже при том, что вы присваиваете всего одному елементу списка. Теперь, когда вы знаете об этой тонкости, количественное разничие контекстов между этими двумя выражениями должны быть очевидны:</p>

<div class="programlisting">

<pre><code>    my $scalar_context = find_chores();
    my <strong>(</strong>$list_context<strong>)</strong> = find_chores();</code></pre>

</div>

<p content_id="707">Выполнение функции или выражения, за исключением присваивания, в списковом контексте может произвести путаницу. Списки распространяют списочный контекст на выражения, которые их содержат. Оба этих вызова <code>find_chores()</code> происходят в списочном  контексте:</p>

<div class="programlisting">

<pre><code>    process_list_of_results( find_chores() );

    my %results =
    (
        cheap_operation     =&gt; $cheap_results,
        expensive_operation =&gt; find_chores(), # OOPS!
    );</code></pre>

</div>

<p content_id="708" id="YnVpbHRpbnM7c2NhbGFy1">Последний пример часто удивляет начинающих программистов,инизиализация хеша (<a href="03-perl-language.html#aGFzaGVz">Хеши</a>) списком значений налагает списочный контекст на <code>find_chores</code>. Используйте оператор <code>scalar</code> для наложения скалярного контекста:</p>

<div class="programlisting">

<pre><code>    my %results =
    (
        cheap_operation     =&gt; $cheap_results,
        expensive_operation =&gt; <strong>scalar</strong> find_chores(),
    );</code></pre>

</div>

<p content_id="709">Почему контекстс важен? Контекстно зависимые функции могут проанализировать свой вызов и решить сколько работы они должны сделать. В пустом контексте <code>find_chores()</code> может легитимно ничего не делать. В скалярном контексте, она может найти только самую важную задачу. В списковом контексте, она должна отсортировать и вернуть весь список.</p>

<h3 id="dmFsdWVfY29udGV4dHM"><a name="TnVtZXJpYyxTdHJpbmcsYW5kQm9vbGVhbkNvbnRleHQ"></a>Числовой, строковый и логический контексты</h3>

<p content_id="710" id="dmFsdWVfY29udGV4dHM"><a name="dmFsdWVjb250ZXh01"></a> <a name="Y29udGV4dDt2YWx1ZQ1"></a>Иной контекст Perl - <em>контекст значения<em> - регулирует то, как Perl интерпретирует часть данных. Вы вероятно уже заметили, что Perl может выяснить у вас число или строка и сконвертировать данные между эти двумя формами. В обмен на невозможность декларирования (или хотя бы отслеживания ) явно какой тип данных содержит переменная или возвращяет функция, контекст значения Perl предоставляет подсказки про то как трактовать эти данные.</p>

<p content_id="711" id="YnVpbHRpbnM7ZXE1">Perl пробразует значения в конретные надлежащие типы (<a href="03-perl-language.html#Y29lcmNpb24">Преобразование</a>), в зависимости от используемых вами ооператоров. К примеру, оператор <code>eq</code> проверяет, что строки содержат одну и ту же информацию <em>как строки</em>:</p>

<div class="programlisting">

<pre><code>    say &quot;Catastrophic crypto fail!&quot; if $alice eq $bob;</code></pre>

</div>

<p content_id="712">Вы возможно были в замешательстве, когда <em>зная</em> что чтроки разные, они сравнивались как одинаковые:</p>

<div class="programlisting">

<pre><code>    my $alice = &#39;alice&#39;;
    say &quot;Catastrophic crypto fail!&quot; if $alice == &#39;Bob&#39;;</code></pre>

</div>

<p content_id="713" id="c3RyaW5nY29udGV4dA1"> <a name="bnVtZXJpY2NvbnRleHQ1"></a> <a name="Y29udGV4dDtzdHJpbmc1"></a> <a name="Y29udGV4dDtudW1lcmlj1"></a><a name="YnVpbHRpbnM7PT01"></a>Где оператор <code>eq</code> рассматривает свои операнды как строки <em>строковый контекст</em> на них, а опертор <code>==</code> навязывает <em>Числовой контекст</em>. В числовом контексте обе строки оцениваются как <code>0</code> (<a href="03-perl-language.html#bnVtZXJpY19jb2VyY2lvbg">Числовое преобразование</a>). Обязательно используйте правильный оператор для того типа контекста, которого хотите.</p>

<p content_id="714" id="Ym9vbGVhbmNvbnRleHQ1"> <a name="Y29udGV4dDtib29sZWFu1"></a><em>Логический контекст</em> применяется , когда вы используете значение в условном операторе. В предыдущих примерах, <code>if</code> оценивает результаты операторов <code>eq</code> и <code>==</code> в логическом контексте.</p>

<p content_id="715" id="Y29udGV4dDtleHBsaWNpdA1">
В редких ослучаях, Вам возможно потребуется явно задать контекст, когда нету соответствующего оператора. Для вызова числового котекста, добавьте ноль к значению. Для вызова строкового контекста, конкатенируйте переменную с пустой строкой. Для вызова логического контекста, дважды примените оператор отрицания:</p>

<div class="programlisting">

<pre>
 <code>    
    my $numeric_x =  0 + $x;  # вызывает числовой контекст
    my $stringy_x = &#39;&#39; . $x;  # вызывает строковый контекст
    my $boolean_x =    !!$x;  # вызывает логический контекст
 </code>
</pre>

</div>

<p content_id="716">Контекст значения легче распознать чем количественный контекст. Как только вы узнаете какой оператор вызывает какой контекст (<a href="04-perl-operators.html#b3BlcmF0b3JfdHlwZXM">Типы операторов</a>), вы редко будете ошибатся.</p>

<h2 id="aW1wbGljaXRfaWRlYXM"><a name="SW1wbGljaXRJZGVhcw"></a>Неявные идеи</h2>

<p content_id="717" id="aW1wbGljaXRfaWRlYXM">Программисты, которые понимают лингвистичеки короткие пути Perl могут пройдясь беглым взглядом по коду сразу понять его самые важные характеристики. Помимо контекста, Perl имеет перемменные по умолчанию (встроенные переменные ) — эквивалент местоимений в программировании.</p>

<h3 id="ZGVmYXVsdF9zY2FsYXJfdmFyaWFibGU"><a name="VGhlRGVmYXVsdFNjYWxhclZhcmlhYmxl"></a>Скалярная переменная по умолчанию</h3>

<p content_id="718" id="ZGVmYXVsdF9zY2FsYXJfdmFyaWFibGU"><a name="ZGVmYXVsdHZhcmlhYmxlcztzY2FsYXI1"></a> <a name="ZGVmYXVsdHZhcmlhYmxlczskXw1"></a> <a name="dmFyaWFibGVzOyRf1"></a> <a name="JF87ZGVmYXVsdHNjYWxhcnZhcmlhYmxl1"></a>
<em>Скалярная переменная по умолчанию</em> (также называемая <em>переменная темы</em>), <code>$_</code>, наиболее заметна в своем <em>отсутсвии</em>: многие встроенные операторы Perl работают над содержимым <code>$_</code> при отсутствии явной перемменной. Вы можете все еще использовать <code>$_</code> в качестве переменной, но это часто не нужно.</p>

<p content_id="719" id="YnVpbHRpbnM7Y2hvbXA1"> <a name="YnVpbHRpbnM7Y2hy1"></a> <a name="YnVpbHRpbnM7b3Jk1"></a> <a name="YnVpbHRpbnM7bGM1"></a> <a name="YnVpbHRpbnM7bGVuZ3Ro1"></a> <a name="YnVpbHRpbnM7cmV2ZXJzZQ1"></a> <a name="YnVpbHRpbnM7dWM1"></a> Многие скалярные операторы Perl (включая <code>chr</code>, <code>ord</code>, <code>lc</code>, <code>length</code>, <code>reverse</code>, и <code>uc</code>) работают с переменной по умолчанию, если вы не предоставили алтернативу. К примеру, <code>chomp</code> удаляет любой завершающий символ новой строки у своего операнда <span class="footnote">Посмотрите <code>perldoc -f chomp</code> и <code>$/</code> для более точных деталей его характеристик.</span>:</p>

<div class="programlisting">

<pre><code>    my $uncle = &quot;Bob\n&quot;;
    chomp $uncle;
    say &quot;&#39;$uncle&#39;&quot;;</code></pre>

</div>

<p content_id="720"><code>$_</code> выполняет ту же функцию в Perl что и местоимение <em>it</em> в Английском. Без явной переменной, <code>chomp</code> удаляет завершающий символ новой строки последовательности из <code>$_</code>. Perl понимает что вы имеете ввиду когда говорите &quot;<code>chomp</code>&quot;; Perl всегда chomp-ает <em>it</em>. Эти две строки кода эквивалентны:</p>

<div class="programlisting">

<pre><code>    chomp $_;
    chomp;</code></pre>

</div>

<p content_id="721" id="YnVpbHRpbnM7c2F51"> <a name="YnVpbHRpbnM7cHJpbnQ1"></a>Подобным образом, <code>say</code> и <code>print</code> оперируют с <code>$_</code> при отсутствии своих аргументов:</p>

<div class="programlisting">

<pre><code>    print;  # напечатает $_ на текущий дескриптор файла
    say;    # напечатает &quot;$_\n&quot; на текущий дескриптор файла</code></pre>

</div>

<p content_id="722" id="cy8vLztzdWJzdGl0dXRpb25vcGVyYXRvcg1"> <a name="bS8vO21hdGNob3BlcmF0b3I1"></a> <a name="dHIvLzt0cmFuc2xpdGVyYXRpb25vcGVyYXRvcg1"></a>Функции регулярных выражий Perl (<a href="06-perl-regular-expressions.html#cmVnZXg">Регулярные выражения</a>) по умолчанию используют <code>$_</code> для соответствия, земены, и транслитерации:</p>

<div class="programlisting">

<pre><code>    $_ = &#39;My name is Paquito&#39;;
    say if /My name is/;

    s/Paquito/Paquita/;

    tr/A-Z/a-z/;
    say;</code></pre>

</div>

<p content_id="723" id="YnVpbHRpbnM7Zm9y1">
Директивы циклов Perl (<a href="03-perl-language.html#bG9vcGluZ19kaXJlY3RpdmVz">Директивы цыклов</a>) dпо умолчанию используют <code>$_</code> как переменную итерации. Рассмотрим <code>for</code> итерации по списку:</p>

<div class="programlisting">

<pre><code>    say &quot;#<strong>$_</strong>&quot; for 1 .. 10;

    for (1 .. 10)
    {
        say &quot;#<strong>$_</strong>&quot;;
    }</code></pre>

</div>

<p content_id="724" id="YnVpbHRpbnM7d2hpbGU1">... или <code>while</code>:</p>

<div class="programlisting">

<pre><code>    while (&lt;STDIN&gt;)
    {
        chomp;
        say scalar reverse;
    }</code></pre>

</div>

<p content_id="725" id="YnVpbHRpbnM7bWFw1">... или <code>map</code> преобразует список:</p>

<div class="programlisting">

<pre><code>    my @squares = map { <strong>$_</strong> * <strong>$_</strong> } 1 .. 10;
    say for @squares;</code></pre>

</div>

<p content_id="726" id="YnVpbHRpbnM7Z3JlcA1">... или <code>grep</code> филтрует список:</p>

<div class="programlisting">

<pre><code>    say &#39;Brunch time!&#39;
        if grep { /pancake mix/ } @pantry;</code></pre>

</div>

<p content_id="727">Как и Английский становится запутанным, если вы используете слишком много местоимений и предшественников, так и Perl, когда вы смешиваете явное и неявное использование <code>$_</code>. Если вы используете это во многих местах, один кусок кода может тихо переопределить значение, ожидаемое другим куском кода. К примеру, если одна функция использует <code>$_</code> и вы вызываете ее в другой функции, которая использует <code>$_</code>,то вызываемая может затереть значение вызывающего:</p>

<div class="programlisting">

<pre><code>    while (&lt;STDIN&gt;)
    {
        chomp;

        # ПЛОХОЙ ПРИМЕР!
        my $munged = calculate_value( $_ );
        say &quot;Original: $_&quot;;
        say &quot;Munged  : $munged&quot;;
    }</code></pre>

</div>

<p content_id="728">Если <code>calculate_value()</code> или любая другая функция изменит <code>$_</code>, это изменение останется на протяжении всей итерации цикла. Начиная с Perl 5.10, вы можете объявить <code>$_</code> как лексическую переменную (<a href="05-perl-functions.html#bGV4aWNhbF9zY29wZQ">Лексическая область</a>) с <code>my</code> для предотвращения затирания существующего экземпляра <code>$_</code>:</p>

<div class="programlisting">

<pre><code>    while (my $_ = &lt;STDIN&gt;)
    {
        ...
    }</code></pre>

</div>

<p content_id="729">К сожелению это конструкция имеет несколько крайних случаев связаных с тем как сушествуюшие функции ведут себя когда они ожидают что <code>$_</code> будет глобальной переменной. Начиная с Perl 5.18, Perl 5 Porters считают эту возможность эксперементальной. Используйте это с осторожностю. Кроме того, испоьлзование именных лексических переменных может быть еще яснее:</p>

<div class="programlisting">

<pre><code>    while (my $line = &lt;STDIN&gt;)
    {
        ...
    }</code></pre>

</div>

<p content_id="730">Use <code>$_</code> как слово &quot;it&quot; в формальном письме: экономно, в маленьких и вполне определленых облаятях.</p>

<div class="tip">
<p content_id="731" class="title">Оператор <code>...</code></p><a name="YnVpbHRpbnM7Li4u1"></a><p content_id="732">В Perl 5.12  введен оператор троеточия (<code>...</code>)  как заполничель кода который вы намерены заполнить позже. Perl парсит это как полную инструкцию, однако выдаст исключение что вы пытаетесь запустить нерелаизованный код если вы попытаетесь запустить его. Подробнее смотрите <code>perldoc perlop</code>.</p>

</div><h3 id="ZGVmYXVsdF9hcnJheV92YXJpYWJsZXM"><a name="VGhlRGVmYXVsdEFycmF5VmFyaWFibGVz"></a>Переменная массива по умолчанию</h3>

<p content_id="733" id="ZGVmYXVsdF9hcnJheV92YXJpYWJsZXM"><a name="ZGVmYXVsdHZhcmlhYmxlczthcnJheQ1"></a> <a name="ZGVmYXVsdHZhcmlhYmxlcztAXw1"></a> <a name="dmFyaWFibGVzO0Bf1"></a> <a name="QF81"></a>
Perl также имеет два неявных(скрытих) переменных массивa. 
Perl передает аргументы функции (<a href="05-perl-functions.html#ZnVuY3Rpb25z">Обьявления функций</a>) 
в массив по имени <code>@_</code>. 
Манипулятивные операции массивов (<a href="03-perl-language.html#YXJyYXlz">Массивы</a>) внутри функций оперируют над этим массивом по умолчанию. 
Эти два отрывка кода эквивалентны:</p>

<div class="programlisting">

<pre><code>    sub foo
    {
        my $arg = shift;
        ...
    }

    sub foo_explicit_args
    {
        my $arg = shift @_;
        ...
    }</code></pre>

</div>

<p content_id="734" id="YnVpbHRpbnM7c2hpZnQ1"> <a name="YnVpbHRpbnM7cG9w1"></a>Так же как <code>$_</code> соответствует местоимению <em>it</em>, <code>@_</code> соответствует местоимениям <em>they</em> и <em>them</em>.<em>В отличие от</em> <code>$_</code>, Perl автоматически локализует <code>@_</code> для вас, когда вы вызываете другую функцию. Встроенные <code>shift</code> и <code>pop</code> оперируют на <code>@_</code>, если не предоставлены явные операнды.</p>

<p content_id="735" id="ZGVmYXVsdHZhcmlhYmxlcztAQVJHVg1"> <a name="dmFyaWFibGVzO0BBUkdW1"></a> <a name="QEFSR1Y1"></a>Вне всех функций, Переменная массив по умолчанию <code>@ARGV</code> содержит аргументы командной строки к программе. Операции массивов Perl (включая <code>shift</code> и <code>pop</code>) оперируют над <code>@ARGV</code> неявно вне функций. Вы не можете использовать <code>@_</code> когда имеете ввиду <code>@ARGV</code>.</p>

<div class="tip">
<p content_id="736" class="title"><code>readline</code></p>
<p content_id="737" id="YnVpbHRpbnM7cmVhZGxpbmU1"> <a name="YnVpbHRpbnM7Z2xvYg1"></a></p>

<p content_id="738">Perl оператор <code>&lt;$fh&gt;</code> тот же что и встроенный <code>readline</code>. 
<code>readline $fh</code> делает то же что и <code>&lt;$fh&gt;</code>. Начиная с Perl 5.10, a bare <code>readline</code> ведет себя как <code>&lt;&gt;</code>, так что вы теперь можете использовать <code>readline</code> везьде. По историческим причинам, <code>&lt;&gt;</code> еще более распространен, но рассмотрите использование <code>readline</code>, как более читаемую алтернативу. (Что более читаемо, <code>glob &#39;*.html&#39;</code> или <code>&lt;*.html&gt;</code>? Та же идея.)</p>

</div><p content_id="739" id="bnVsbGZpbGVoYW5kbGU1"><code>ARGV</code> имеет один особый случай. Если вы читается с пустого файлового дексриптора <code>&lt;&gt;</code>, Perl трактует каждый элемент <code>@ARGV</code> как <em>имя</em> файла для открытия для чтения.(Если <code>@ARGV</code> пустой, Perl читает с стандартного ввода.) Неявное поведение <code>@ARGV</code> пригодно для написания маленьких программ,таких как филтр командной строки который реверсирует свой вход:</p>

<div class="programlisting">

<pre><code>    while (&lt;&gt;)
    {
        chomp;
        say scalar reverse;
    }</code></pre>

</div>

<p content_id="740">Почему <code>scalar</code>? <code>say</code> навязывает списочный контекст на свои операнды. <code>reverse</code> передает свой контекст своим операндам, трактуя их как список в списочном контексте и конкатениренную строку в скалярном контексте. Если поведение <code>reverse</code> звучит странно, ваши инстинкты корректны. Perl возможно следовало бы отделить &quot;reverse строки&quot; от &quot;reverse списка&quot;.</p>

<p content_id="741">Если вы запустите это со списком файлов:</p>

<div class="screen">
<pre><code>    $ <strong>perl reverse_lines.pl encrypted/*.txt</strong></code></pre>

</div><p content_id="742">... результат будет одной длинной строкой вывода.Без каких либо аргументов, вы можете предоставить свой стандартный ввод по конвееру в другой программе или введя непосредственно.Это - большая гибкость в маленькой программе, однако Perl только начинается .</p> </div>
